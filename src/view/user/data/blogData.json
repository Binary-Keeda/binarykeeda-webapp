[
  {
    "slug": "machine-learning-1-year",
    "title": "Machine Learning - 1 Year Roadmap",
    "time": "1 year",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737823065/1_yr_ML_roadmap_rppa7j.docx",
    "description": "Comprehensive 1-year roadmap to master Machine Learning from scratch.",
    "keywords": ["machine learning", "1 year plan", "ML roadmap", "AI"],
    "sections": [
      {
        "type": "heading1",
        "id": "month-1-foundations",
        "text": "Month 1: Foundations – Programming and Essential Libraries"
      },
      {
        "type": "paragraph",
        "text": "A strong understanding of programming and data manipulation is the starting point of any ML journey. In this month, you'll focus on Python and essential libraries used for data processing, analysis, and modeling."
      },
      {
        "type": "heading2",
        "id": "python",
        "text": "Python (3 Days)"
      },
      {
        "type": "video",
        "title": "Python Full Course – Programming for Beginners",
        "url": "https://www.youtube.com/watch?v=rfscVS0vtbw",
        "description": "Learn Python basics including variables, loops, conditionals, functions, and OOP with this comprehensive beginner-friendly video."
      },
      {
        "type": "paragraph",
        "text": "Python is the most popular programming language in the ML ecosystem due to its simplicity, readability, and rich ecosystem of libraries. Mastering Python fundamentals is essential to start your machine learning journey."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Syntax and Variables",
            "desc": "Understand variable types, assignments, and operations."
          },
          {
            "label": "Control Flow",
            "desc": "Use if-else, loops (for/while) for program control."
          },
          {
            "label": "Functions",
            "desc": "Define reusable blocks of code using functions."
          },
          {
            "label": "Object-Oriented Programming",
            "desc": "Create classes, objects, and understand encapsulation and inheritance."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))"
      },
      {
        "type": "paragraph",
        "text": "Python's value in machine learning goes beyond syntax. It integrates seamlessly with libraries like NumPy, Pandas, Scikit-learn, TensorFlow, and PyTorch, forming the core of most ML workflows. Its large community means faster debugging, support, and the availability of high-quality open-source tools."
      },
      {
        "type": "paragraph",
        "text": "Whether you're cleaning data, building regression models, deploying web apps, or training deep learning networks, Python enables you to handle every part of the ML pipeline in one language."
      },
      {
        "type": "table",
        "headers": ["Feature", "Python", "R", "Java"],
        "rows": [
          ["Ease of Learning", "Easy", "Moderate", "Hard"],
          ["Library Support", "Excellent", "Good", "Limited"],
          ["Community Support", "Very Active", "Active", "Moderate"],
          [
            "Use Case",
            "General ML & DL",
            "Statistical ML",
            "Enterprise & Backend"
          ]
        ]
      },
      {
        "type": "mcq",
        "question": "Q1 Which of the following is a correct way to define a function in Python?",
        "code": "",
        "options": [
          "function greet(name) { return 'Hello ' + name; }",
          "def greet(name): return \"Hello \" + name",
          "def greet(name) { return \"Hello \" + name; }",
          "function greet(name): return 'Hello ' + name"
        ],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "id": "numpy",
        "text": "NumPy (2 Days)"
      },
      {
        "type": "video",
        "title": "NumPy Crash Course",
        "url": "https://youtu.be/Rbh1rieb3zc?feature=shared",
        "description": "Learn NumPy essentials like arrays, broadcasting, and matrix operations."
      },
      {
        "type": "paragraph",
        "text": "NumPy (Numerical Python) is the foundational library for scientific computing in Python. It allows fast computation using powerful N-dimensional array objects. It's widely used in ML pipelines for pre-processing, numerical operations, and algorithm development."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "ndarray",
            "desc": "Create and manipulate NumPy arrays."
          },
          {
            "label": "Broadcasting",
            "desc": "Apply arithmetic operations to arrays with different shapes."
          },
          {
            "label": "Mathematical Functions",
            "desc": "Use built-in functions for computations like sum, mean, std."
          },
          {
            "label": "Matrix Operations",
            "desc": "Perform dot product, transpose, and linear algebra functions."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "You’ll often use NumPy for vectorized operations that avoid slow Python loops. Functions like `np.dot`, `np.linalg.inv`, or `np.mean` are essential for ML model building and analysis."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\nx = np.array([1, 2, 3])\ny = np.array([4, 5, 6])\nprint('Dot Product:', np.dot(x, y))"
      },
      {
        "type": "mcq",
        "question": "Q2 What does `np.dot(x, y)` compute?",
        "code": "x = np.array([1, 2])\ny = np.array([3, 4])\nprint(np.dot(x, y))",
        "options": ["[3, 8]", "11", "[4, 6, 8]", "SyntaxError"],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "id": "pandas",
        "text": "Pandas (2 Days)"
      },
      {
        "type": "video",
        "title": "Pandas Full Course – Data Analysis in Python",
        "url": "https://youtu.be/RhEjmHeDNoA?feature=shared",
        "description": "Learn how to use Pandas for data manipulation, filtering, and visualization."
      },
      {
        "type": "paragraph",
        "text": "Pandas is a data analysis and manipulation tool built on top of NumPy. It introduces two powerful data structures—Series and DataFrame—that make it easy to clean, filter, transform, and visualize tabular data."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "DataFrame Creation",
            "desc": "Create DataFrames from lists, dictionaries, or CSV files."
          },
          {
            "label": "Filtering and Selection",
            "desc": "Use boolean indexing and conditional filters."
          },
          {
            "label": "Data Cleaning",
            "desc": "Handle missing values, duplicates, and data type conversions."
          },
          {
            "label": "Grouping and Aggregation",
            "desc": "Group data and apply aggregate functions like sum, mean."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "In machine learning, Pandas is essential for loading datasets (like CSVs), exploring the data (using `.describe()`), identifying nulls (`.isnull()`), and formatting data into features and labels."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\nprint(df.head())\nprint(df['Age'].mean())"
      },
      {
        "type": "paragraph",
        "text": "You can also merge, join, and pivot large datasets with Pandas. This comes in handy when working with real-world messy data collected from multiple sources or APIs."
      },
      {
        "type": "mcq",
        "question": "Q3 What does the `.groupby()` method do?",
        "code": "df.groupby('Department')['Salary'].mean()",
        "options": [
          "Sorts the DataFrame",
          "Filters for high salary",
          "Aggregates salary by Department",
          "Creates a new column"
        ],
        "correctIndex": 2
      },
      {
        "type": "heading2",
        "id": "scikit-learn",
        "text": "Scikit-learn (2 Days)"
      },
      {
        "type": "video",
        "title": "Scikit-learn Tutorial – Machine Learning in Python",
        "url": "https://youtu.be/0B5eIE_1vpU?feature=shared",
        "description": "Explore regression, classification, clustering, and model evaluation using scikit-learn."
      },
      {
        "type": "paragraph",
        "text": "Scikit-learn is the go-to library for classical machine learning. It provides simple and efficient tools for data mining and data analysis."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Regression Models",
            "desc": "Implement linear and polynomial regression."
          },
          {
            "label": "Classification Models",
            "desc": "Use decision trees, logistic regression, and k-NN."
          },
          {
            "label": "Clustering",
            "desc": "Apply K-means and hierarchical clustering."
          },
          {
            "label": "Model Evaluation",
            "desc": "Use accuracy, precision, recall, and confusion matrix."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit([[1], [2], [3]], [2, 4, 6])\nprint(model.predict([[4]]))"
      },
      {
        "type": "heading2",
        "id": "matplotlib",
        "text": "Matplotlib (2 Days)"
      },
      {
        "type": "video",
        "title": "Matplotlib Tutorial – Data Visualization in Python",
        "url": "https://youtu.be/3Xc3CA655Y4?feature=shared",
        "description": "Understand plotting basics and create graphs like bar charts, histograms, and scatter plots."
      },
      {
        "type": "paragraph",
        "text": "Matplotlib is used for creating static, animated, and interactive visualizations. It's crucial for data exploration and presentation."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Basic Plotting",
            "desc": "Line plots, bar charts, histograms."
          },
          {
            "label": "Customization",
            "desc": "Change colors, labels, titles, and legends."
          },
          {
            "label": "Subplots",
            "desc": "Visualize multiple plots in a single figure."
          },
          {
            "label": "Saving Figures",
            "desc": "Export plots as PNG, PDF for reports."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "import matplotlib.pyplot as plt\nplt.plot([1, 2, 3], [4, 5, 6])\nplt.title('Line Chart')\nplt.show()"
      },
      {
        "type": "quote",
        "text": "“The foundation of every ML model is data – how you manage and understand it matters as much as the algorithms you use.”"
      },
      {
        "type": "heading1",
        "id": "month-2-working-with-data",
        "text": "Month 2: Working with Data – SQL and Power BI"
      },
      {
        "type": "paragraph",
        "text": "In the second month of your machine learning journey, you’ll focus on two essential data tools: SQL and Power BI. Understanding how to retrieve, manage, and visualize data is crucial for anyone working with real-world datasets. These skills help you uncover trends, make better decisions, and effectively communicate findings."
      },
      {
        "type": "heading2",
        "id": "sql-8-days",
        "text": "SQL (8 Days)"
      },
      {
        "type": "paragraph",
        "text": "Structured Query Language (SQL) is a standardized programming language used for managing relational databases. As a data professional or aspiring ML engineer, knowing SQL allows you to extract meaningful insights from large datasets efficiently. You'll learn how to filter, sort, aggregate, and join data from multiple tables."
      },
      {
        "type": "video",
        "title": "SQL Full Course Tutorial",
        "url": "https://youtu.be/D_wNQR3LeeM?feature=shared",
        "description": "Comprehensive guide on learning SQL with practical examples and database schemas."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Basic SELECT Queries",
            "desc": "Learn how to retrieve data from one or more tables using SELECT statements."
          },
          {
            "label": "WHERE Clause",
            "desc": "Apply conditions to filter rows from your results."
          },
          {
            "label": "JOIN Operations",
            "desc": "Combine data across multiple tables using INNER JOIN, LEFT JOIN, RIGHT JOIN."
          },
          {
            "label": "GROUP BY and Aggregations",
            "desc": "Summarize data with functions like COUNT(), SUM(), AVG()."
          },
          {
            "label": "Subqueries",
            "desc": "Write queries within queries to handle complex filtering or selection."
          }
        ]
      },
      {
        "type": "code",
        "language": "sql",
        "code": "SELECT department, COUNT(*) AS total_employees\nFROM employees\nWHERE salary > 50000\nGROUP BY department\nORDER BY total_employees DESC;"
      },
      {
        "type": "mcq",
        "question": "Q4 Which SQL clause is used to remove duplicate rows from the result set?",
        "code": "",
        "options": ["WHERE", "DISTINCT", "GROUP BY", "UNIQUE"],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "id": "power-bi-7-days",
        "text": "Power BI (7 Days)"
      },
      {
        "type": "paragraph",
        "text": "Power BI is a powerful business analytics tool by Microsoft that allows users to create interactive visualizations and business intelligence reports. It’s used widely in the industry for dashboards, reporting, and data storytelling. You’ll learn to connect datasets, clean them using Power Query, and visualize using charts, maps, and slicers."
      },
      {
        "type": "video",
        "title": "Power BI Complete Tutorial",
        "url": "https://youtu.be/C8TgduBEg2E?feature=shared",
        "description": "Step-by-step beginner tutorial to understand the Power BI interface, data loading, transformation, and visual creation."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Data Loading",
            "desc": "Import data from Excel, SQL Server, or web sources."
          },
          {
            "label": "Power Query Editor",
            "desc": "Clean, transform, and shape your data before visualization."
          },
          {
            "label": "Visual Components",
            "desc": "Use bar charts, pie charts, line graphs, maps, and cards for impactful visuals."
          },
          {
            "label": "Filters and Slicers",
            "desc": "Add interactivity and allow dynamic data filtering in dashboards."
          },
          {
            "label": "Publishing",
            "desc": "Share your reports on Power BI Service for team collaboration."
          }
        ]
      },
      {
        "type": "quote",
        "text": "Data is the new oil — and visualization is the refinery that turns it into actionable insights."
      },
      {
        "type": "table",
        "headers": ["Feature", "SQL", "Power BI"],
        "rows": [
          [
            "Purpose",
            "Querying & manipulating data",
            "Visualizing & reporting data"
          ],
          [
            "Data Sources",
            "Relational databases",
            "Multiple (SQL, Excel, APIs)"
          ],
          [
            "User Type",
            "Technical (Developers, Analysts)",
            "Business Users & Analysts"
          ],
          ["Learning Curve", "Moderate", "Beginner Friendly"],
          ["Tool Type", "Language/Interface", "BI Visualization Platform"]
        ]
      },
      {
        "type": "paragraph",
        "text": "By the end of Month 2, you’ll be confident in pulling raw data from relational databases and creating stunning dashboards to present your insights. These foundational skills are essential for any career path in data science, analytics, or machine learning. In the upcoming months, you’ll start working with Python-based data tools and libraries."
      },
      {
        "type": "heading1",
        "id": "maths-ml",
        "text": "Month 3–4: The Mathematics Behind Machine Learning"
      },
      {
        "type": "video",
        "title": "Mathematics for Machine Learning Full Course",
        "url": "https://youtu.be/0z6AhrOSrRs?feature=shared",
        "description": "Watch this tutorial to gain an intuitive understanding of the mathematical foundations needed for machine learning."
      },
      {
        "type": "paragraph",
        "text": "Machine Learning is not just about using libraries and training models; it is deeply rooted in mathematics. Understanding the underlying mathematical principles empowers you to optimize models, interpret outputs, and innovate new algorithms. This phase focuses on three foundational areas: Linear Algebra, Calculus, and Probability & Statistics."
      },
      {
        "type": "heading2",
        "id": "linear-algebra",
        "text": "Linear Algebra"
      },
      {
        "type": "paragraph",
        "text": "Linear Algebra is the backbone of many ML algorithms, particularly in deep learning. Concepts such as vectors, matrices, and transformations are used in data representation and manipulation."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Vectors",
            "desc": "Represent features or weights. Useful in representing data points in space."
          },
          {
            "label": "Matrices",
            "desc": "Used for representing datasets, transformations, and weights in neural networks."
          },
          {
            "label": "Eigenvalues and Eigenvectors",
            "desc": "Crucial in PCA (dimensionality reduction) and understanding matrix decompositions."
          },
          {
            "label": "Dot and Cross Products",
            "desc": "Used in measuring similarity and in geometric interpretations of models."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\nA = np.array([[1, 2], [3, 4]])\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint('Eigenvalues:', eigenvalues)\nprint('Eigenvectors:', eigenvectors)"
      },
      {
        "type": "heading2",
        "id": "calculus",
        "text": "Calculus"
      },
      {
        "type": "paragraph",
        "text": "Calculus, particularly differential calculus, plays a key role in understanding how models learn. It is used in optimization techniques such as gradient descent."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Derivatives",
            "desc": "Help in determining the rate of change in loss with respect to parameters."
          },
          {
            "label": "Gradients",
            "desc": "Vectors of partial derivatives used to update model weights in optimization."
          },
          {
            "label": "Chain Rule",
            "desc": "Crucial in backpropagation to compute gradients in neural networks."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "def f(x):\n    return x**2 + 2*x + 1\n\ndef derivative(f, x, h=1e-5):\n    return (f(x + h) - f(x - h)) / (2 * h)\n\nprint('Derivative at x=3:', derivative(f, 3))"
      },
      {
        "type": "heading2",
        "id": "probability-statistics",
        "text": "Probability and Statistics"
      },
      {
        "type": "paragraph",
        "text": "This area allows you to interpret uncertainty, model randomness, and draw inferences from data. Core statistical concepts are necessary for hypothesis testing and probabilistic models like Naive Bayes."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Bayes' Theorem",
            "desc": "Foundation of probabilistic reasoning in ML."
          },
          {
            "label": "Distributions",
            "desc": "Normal, Bernoulli, Poisson — used in data modeling and assumptions."
          },
          {
            "label": "Hypothesis Testing",
            "desc": "Used to validate assumptions about data (e.g., A/B testing)."
          },
          {
            "label": "Central Limit Theorem",
            "desc": "Enables use of normal distribution even with non-normal data."
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q5 What is the derivative of the function f(x) = 3x²?",
        "code": "f(x) = 3x²",
        "options": ["6x", "3x", "9x", "x²"],
        "correctIndex": 0
      },
      {
        "type": "table",
        "headers": ["Concept", "Use Case in ML"],
        "rows": [
          ["Matrix Multiplication", "Transforming inputs in neural networks"],
          ["Gradient", "Weight updates in optimization algorithms"],
          ["Probability Distributions", "Modeling uncertainties"],
          ["Eigenvectors", "Dimensionality reduction in PCA"]
        ]
      },
      {
        "type": "quote",
        "text": "Mathematics is the language with which God has written the universe. — Galileo Galilei"
      },
      {
        "type": "paragraph",
        "text": "Spending time to master the mathematics behind ML will drastically improve your problem-solving skills, especially when debugging models or choosing the right algorithms. The ability to reason mathematically about a problem often leads to more robust and interpretable solutions."
      },
      {
        "type": "paragraph",
        "text": "As you progress, try to derive loss functions, calculate gradients by hand, and experiment with building models from scratch. This will strengthen your fundamentals and prepare you for advanced machine learning and deep learning topics later in the journey."
      },
      {
        "type": "heading1",
        "id": "ml-core-concepts",
        "text": "Month 5–6: Core Machine Learning Concepts and Techniques"
      },
      {
        "type": "video",
        "title": "Complete Machine Learning in 15 Days",
        "url": "https://youtu.be/JxgmHe2NyeY?feature=shared",
        "description": "This tutorial covers ML fundamentals like regression, classification, clustering, and evaluation metrics using Python and Scikit-learn."
      },
      {
        "type": "paragraph",
        "text": "After building a strong mathematical foundation, you’re now ready to explore the world of practical machine learning using Python and Scikit-learn. These two months are dedicated to understanding how ML algorithms work under the hood and applying them to solve real-world problems."
      },
      {
        "type": "heading2",
        "id": "key-algorithms",
        "text": "Key Machine Learning Algorithms"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Linear Regression",
            "desc": "Used for predicting continuous values based on input features. Example: predicting housing prices."
          },
          {
            "label": "Logistic Regression",
            "desc": "Classification algorithm for binary outcomes (e.g., spam vs not spam)."
          },
          {
            "label": "Decision Trees",
            "desc": "Tree-structured models useful for both classification and regression."
          },
          {
            "label": "Random Forest",
            "desc": "An ensemble of decision trees that improves accuracy by reducing overfitting."
          },
          {
            "label": "K-Means Clustering",
            "desc": "Unsupervised algorithm for grouping data into K distinct clusters."
          },
          {
            "label": "Support Vector Machines (SVM)",
            "desc": "Effective in high-dimensional spaces; separates data with a hyperplane."
          },
          {
            "label": "Model Validation & Evaluation",
            "desc": "Techniques like train-test split, cross-validation, and metrics like accuracy, precision, recall."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "ml-pipeline",
        "text": "Understanding the Machine Learning Pipeline"
      },
      {
        "type": "paragraph",
        "text": "A robust machine learning pipeline ensures repeatable, scalable, and high-quality model building. It includes steps such as data preprocessing, feature selection, model training, hyperparameter tuning, and evaluation. Libraries like Scikit-learn simplify this process using `Pipeline()` and `GridSearchCV()`."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\npipeline = Pipeline([\n    ('scaler', StandardScaler()),\n    ('classifier', LogisticRegression())\n])\n\npipeline.fit(X_train, y_train)"
      },
      {
        "type": "heading2",
        "id": "real-dataset",
        "text": "Practice with Real Datasets"
      },
      {
        "type": "paragraph",
        "text": "Learning becomes significantly more effective when you use real-world datasets. Try applying your knowledge to popular datasets like the Titanic survival prediction, Breast Cancer classification, or predicting Boston housing prices. These datasets can be accessed from libraries like `sklearn.datasets`, `Kaggle`, or `UCI ML Repository`."
      },
      {
        "type": "table",
        "headers": ["Algorithm", "Type", "Use-case"],
        "rows": [
          ["Linear Regression", "Supervised", "Predicting house prices"],
          [
            "Logistic Regression",
            "Supervised",
            "Classifying emails as spam or not"
          ],
          ["K-Means", "Unsupervised", "Customer segmentation"],
          ["Decision Tree", "Supervised", "Credit risk analysis"],
          ["SVM", "Supervised", "Image classification"]
        ]
      },
      {
        "type": "heading2",
        "id": "model-evaluation",
        "text": "Model Validation and Evaluation"
      },
      {
        "type": "paragraph",
        "text": "Evaluating your model correctly is as important as building it. Depending on your task—classification or regression—you’ll use different evaluation metrics. Use accuracy, precision, recall, and F1-score for classification problems. For regression, focus on mean squared error (MSE), mean absolute error (MAE), and R-squared."
      },
      {
        "type": "mcq",
        "question": "Q6 Which of the following algorithms is used for classification?",
        "code": null,
        "options": [
          "Linear Regression",
          "Logistic Regression",
          "K-Means Clustering",
          "PCA"
        ],
        "correctIndex": 1
      },
      {
        "type": "paragraph",
        "text": "As you complete this module, make sure you’re not just watching tutorials but actively coding along. Build mini-projects such as churn prediction, movie review sentiment analysis, or even handwriting recognition using `scikit-learn`, `pandas`, and `matplotlib`."
      },
      {
        "type": "heading1",
        "id": "deep-learning",
        "text": "Month 7–8: Introduction to Deep Learning"
      },
      {
        "type": "video",
        "title": "Deep Learning Full Course",
        "url": "https://youtu.be/d2kxUVwWWwU?feature=shared",
        "description": "A detailed tutorial covering fundamentals of deep learning, including neural networks, CNNs, RNNs, and frameworks like TensorFlow and PyTorch."
      },
      {
        "type": "paragraph",
        "text": "Deep Learning is a powerful subset of machine learning that deals with algorithms inspired by the structure and function of the human brain. It enables machines to process data with a high level of abstraction, powering advanced applications like image recognition, speech processing, autonomous vehicles, and natural language understanding."
      },
      {
        "type": "heading2",
        "id": "key-concepts",
        "text": "Key Deep Learning Concepts"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Feedforward Neural Networks",
            "desc": "Basic architecture where information moves in one direction — from input to output — with no cycles."
          },
          {
            "label": "Backpropagation",
            "desc": "An optimization algorithm used to minimize loss by adjusting weights through gradient descent."
          },
          {
            "label": "Convolutional Neural Networks (CNNs)",
            "desc": "Designed specifically for processing grid-like data such as images, using filters and pooling layers."
          },
          {
            "label": "Recurrent Neural Networks (RNNs)",
            "desc": "Effective for sequence data such as time series or language modeling, using loops to preserve temporal context."
          },
          {
            "label": "TensorFlow and PyTorch",
            "desc": "Popular open-source frameworks for building and training deep learning models."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "A typical deep learning project begins with data preprocessing, followed by designing a neural network architecture and choosing an appropriate activation function, loss function, and optimizer. The model is trained over multiple epochs, with backpropagation adjusting weights to improve performance."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\n\n# Simple Feedforward Neural Network\nmodel = Sequential([\n    Dense(128, activation='relu', input_shape=(784,)),\n    Dense(64, activation='relu'),\n    Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      },
      {
        "type": "heading2",
        "id": "applications",
        "text": "Real-World Applications"
      },
      {
        "type": "paragraph",
        "text": "Deep learning has enabled major breakthroughs in computer vision, natural language processing, and generative AI. Some real-world applications include:"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Self-Driving Cars",
            "desc": "CNNs help process camera data to detect lanes, pedestrians, and traffic signs."
          },
          {
            "label": "Voice Assistants",
            "desc": "RNNs and Transformers help in understanding and generating human-like language."
          },
          {
            "label": "Healthcare Diagnostics",
            "desc": "Deep learning models assist in detecting tumors, diabetic retinopathy, and more from medical images."
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q7 Which deep learning model is best suited for image classification tasks?",
        "code": "",
        "options": [
          "Recurrent Neural Networks (RNNs)",
          "Convolutional Neural Networks (CNNs)",
          "Decision Trees",
          "Support Vector Machines"
        ],
        "correctIndex": 1
      },
      {
        "type": "table",
        "headers": ["Model", "Used For", "Example"],
        "rows": [
          ["CNN", "Image recognition", "Face detection, medical imaging"],
          ["RNN", "Sequential data", "Language translation, stock prediction"],
          ["GAN", "Data generation", "Deepfakes, AI art"],
          [
            "Autoencoder",
            "Feature learning",
            "Image compression, noise removal"
          ]
        ]
      },
      {
        "type": "paragraph",
        "text": "Deep learning models often require large datasets and computational resources. GPU acceleration and frameworks like PyTorch and TensorFlow make model development scalable and efficient. Understanding overfitting, regularization, and hyperparameter tuning is also essential to train robust models."
      },
      {
        "type": "quote",
        "text": "“Deep learning will revolutionize every industry — from healthcare to agriculture.” – Andrew Ng"
      },
      {
        "type": "paragraph",
        "text": "As you become more comfortable with deep learning, explore advanced topics like Transfer Learning, Transformers, BERT, and Generative Adversarial Networks (GANs). These architectures enable models to perform at or above human-level performance in several domains."
      },
      {
        "type": "heading1",
        "id": "month-9-interview-preparation",
        "text": "Month 9: Interview Preparation"
      },
      {
        "type": "paragraph",
        "text": "As you approach the final stretch of your learning journey, it's time to shift focus to interview preparation. This phase will help you build confidence and become job-ready by mastering both theoretical and practical machine learning (ML) and deep learning (DL) concepts that are frequently asked in interviews."
      },
      {
        "type": "heading2",
        "id": "ml-dl-interview-questions",
        "text": "ML & DL Interview Questions (10 Days)"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Machine Learning Questions",
            "desc": "https://www.geeksforgeeks.org/machine-learning-interview-questions/"
          },
          {
            "label": "Deep Learning Questions",
            "desc": "https://www.geeksforgeeks.org/deep-learning-interview-questions/"
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Start with foundational ML concepts like supervised and unsupervised learning, evaluation metrics, bias-variance tradeoff, and ensemble methods. Interviewers commonly assess your understanding of both theory and implementation."
      },
      {
        "type": "heading2",
        "id": "important-concepts",
        "text": "Important Concepts to Review"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Overfitting vs Underfitting",
            "desc": "Understand how models behave when they memorize versus generalize, and learn how to detect and correct these issues."
          },
          {
            "label": "Regularization",
            "desc": "L1 and L2 regularization techniques are critical in preventing overfitting and improving model generalization."
          },
          {
            "label": "Feature Engineering",
            "desc": "Learn how to transform raw data into meaningful features using techniques like normalization, encoding, and dimensionality reduction."
          },
          {
            "label": "Gradient Descent",
            "desc": "Grasp how optimization algorithms like batch, stochastic, and mini-batch gradient descent help minimize loss functions."
          },
          {
            "label": "Model Evaluation",
            "desc": "Familiarize yourself with confusion matrix, precision, recall, F1 score, and ROC-AUC for classification tasks."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Deep learning questions often revolve around neural networks, backpropagation, activation functions, CNNs, RNNs, and model tuning. Be prepared to discuss trade-offs and design choices you’ve made in past projects."
      },
      {
        "type": "table",
        "headers": ["Concept", "ML", "DL"],
        "rows": [
          ["Overfitting", "Yes", "Yes"],
          ["Regularization", "L1/L2", "Dropout, L2"],
          ["Feature Selection", "Important", "Handled via layers"],
          ["Optimization", "Gradient Descent", "Advanced (Adam, RMSProp)"],
          ["Interpretability", "Higher", "Lower"]
        ]
      },
      {
        "type": "heading2",
        "id": "commonly-asked-code",
        "text": "Commonly Asked ML Code Snippet"
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))"
      },
      {
        "type": "mcq",
        "question": "Q8 Which technique helps reduce overfitting in deep learning?",
        "code": "",
        "options": [
          "Batch Normalization",
          "Increasing Model Size",
          "Using All Features",
          "Removing Dropout"
        ],
        "correctIndex": 0
      },
      {
        "type": "paragraph",
        "text": "Try mock interviews with peers or use platforms like Pramp, Interviewing.io, or LeetCode Interview Simulators. This will help you develop clear communication and problem-solving under time pressure."
      },
      {
        "type": "quote",
        "text": "“In interviews, how you think is more important than just getting the right answer.”"
      },
      {
        "type": "heading1",
        "id": "project-development",
        "text": "Month 10–11: Project Development"
      },
      {
        "type": "paragraph",
        "text": "During the tenth and eleventh months, you will transition from learning theoretical concepts to implementing practical machine learning projects. This stage is crucial in solidifying your knowledge and showcasing your skills through real-world applications that can be added to your resume and GitHub profile."
      },
      {
        "type": "paragraph",
        "text": "By the end of this phase, you should have completed multiple end-to-end ML projects, each including stages such as data collection, preprocessing, model training, evaluation, and result visualization. These projects not only demonstrate your understanding but also your ability to deliver working solutions to data problems."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Project Duration",
            "desc": "Approximately 45 days"
          },
          {
            "label": "Source Playlist",
            "desc": "https://www.youtube.com/watch?v=S_F_c9e2bz4&list=PLZoTAELRMXVPS-dOaVbAux22vzqdgoGhG"
          },
          {
            "label": "Project Requirements",
            "desc": "Each project should include all standard phases of machine learning—data collection, preprocessing, training, evaluation, and deployment-ready results."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "project-ideas",
        "text": "Popular Project Ideas"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "House Price Prediction",
            "desc": "Predict real estate prices based on features like location, area, number of rooms, and age of the property using regression models."
          },
          {
            "label": "Email Spam Detection",
            "desc": "Build a spam classifier using NLP techniques and models like Naive Bayes or Logistic Regression."
          },
          {
            "label": "Movie Recommendation System",
            "desc": "Use collaborative filtering or content-based filtering to recommend movies based on user preferences."
          },
          {
            "label": "Digit Recognition with CNNs",
            "desc": "Train a convolutional neural network on the MNIST dataset to classify handwritten digits with high accuracy."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "You can expand these projects by integrating frontends (using React or Streamlit), deploying models on cloud platforms, or creating REST APIs for real-time predictions."
      },
      {
        "type": "heading2",
        "id": "project-phases",
        "text": "Phases of Each Project"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Data Collection",
            "desc": "Use datasets from sources like Kaggle, UCI ML Repository, or scrape your own using APIs and web scraping techniques."
          },
          {
            "label": "Preprocessing and Feature Engineering",
            "desc": "Clean the dataset by handling missing values, encoding categorical variables, and engineering new features to improve model performance."
          },
          {
            "label": "Model Training and Evaluation",
            "desc": "Train suitable models, tune hyperparameters, and evaluate using metrics such as accuracy, precision, recall, or RMSE."
          },
          {
            "label": "Visualization and Documentation",
            "desc": "Use matplotlib, seaborn, or Plotly to create interactive visualizations and document your process thoroughly."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\n\n# Load and prepare dataset\ndf = pd.read_csv('house_prices.csv')\nX = df[['area', 'bedrooms', 'age']]\ny = df['price']\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate\npredictions = model.predict(X_test)\nrmse = mean_squared_error(y_test, predictions, squared=False)\nprint(f\"RMSE: {rmse:.2f}\")"
      },
      {
        "type": "paragraph",
        "text": "For better learning, try implementing the same project using multiple algorithms and compare their performance. This exercise helps you understand which models are better suited for specific types of data."
      },
      {
        "type": "heading2",
        "id": "tips-best-practices",
        "text": "Tips & Best Practices"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Start Simple",
            "desc": "Begin with basic linear models and gradually move to complex architectures like Random Forests or Neural Networks."
          },
          {
            "label": "Document Everything",
            "desc": "Maintain detailed notebooks or markdown files that explain your approach, decisions, and results."
          },
          {
            "label": "Version Control",
            "desc": "Use Git to manage code versions and push your repositories to GitHub."
          },
          {
            "label": "Deploy If Possible",
            "desc": "Deploy your models using platforms like Streamlit, Flask, or FastAPI to give them a user-friendly interface."
          }
        ]
      },
      {
        "type": "quote",
        "text": "“A portfolio of well-documented projects can often speak louder than your resume.”"
      },
      {
        "type": "paragraph",
        "text": "In the final weeks, consider revisiting earlier projects to refactor the code, improve visualizations, or add features such as model interpretability (using SHAP or LIME) and performance dashboards."
      },
      {
        "type": "heading2",
        "id": "project-showcase",
        "text": "Showcasing Your Projects"
      },
      {
        "type": "paragraph",
        "text": "Once your projects are ready, create a well-organized GitHub repository with the following structure:"
      },
      {
        "type": "code",
        "language": "bash",
        "code": "house-price-prediction/\n├── data/\n│   └── house_prices.csv\n├── notebooks/\n│   └── EDA_and_Model.ipynb\n├── src/\n│   └── model.py\n├── README.md\n└── requirements.txt"
      },
      {
        "type": "paragraph",
        "text": "Additionally, consider writing blog posts or LinkedIn articles about your projects. Explaining your work to others enhances your understanding and visibility."
      },
      {
        "type": "heading1",
        "id": "month-12",
        "text": "Month 12: Self-Driven Projects and Research"
      },
      {
        "type": "paragraph",
        "text": "This final month marks your transition from structured learning to independent innovation. After eleven months of building strong foundations in machine learning, programming, deployment, and practical applications, now is the time to consolidate your learning into impactful self-driven projects. Whether it's an academic research initiative, an open-source contribution, or a startup idea, this phase is crucial in showcasing your potential as a machine learning practitioner."
      },
      {
        "type": "heading2",
        "id": "final-project-ideas",
        "text": "Self-Research and Final Projects (4–6 Months Ongoing)"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Open-Source Machine Learning Projects",
            "desc": "Contribute to GitHub repositories in fields like NLP, Computer Vision, or Healthcare AI. This builds credibility and enhances collaboration experience."
          },
          {
            "label": "Research Collaboration",
            "desc": "Partner with your university faculty or peers to work on a publication-worthy machine learning research paper."
          },
          {
            "label": "ML-Powered Application",
            "desc": "Create a web or mobile app that uses machine learning — for example, an image classifier, sentiment analyzer, or price predictor."
          },
          {
            "label": "Advanced Topics Exploration",
            "desc": "Delve into GANs, Reinforcement Learning, or self-supervised learning to explore frontiers beyond supervised/unsupervised learning."
          },
          {
            "label": "Portfolio Development",
            "desc": "Build a personal blog or portfolio to host your code, documentation, and project demos using tools like GitHub Pages or Netlify."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "The goal is not just to implement what you’ve already learned, but to push the boundaries of your skills. Choose a problem that matters to you — something socially relevant, technically challenging, or innovative — and document your entire process. This not only helps you prepare for interviews but can become the centerpiece of your resume or LinkedIn profile."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"Test Accuracy:\", accuracy_score(y_test, y_pred))"
      },
      {
        "type": "paragraph",
        "text": "In your project, integrate real datasets (e.g., from Kaggle or UCI Repository), use advanced ML models or deep learning (using TensorFlow or PyTorch), and present results with interactive visualizations or dashboards using tools like Plotly, Streamlit, or Dash."
      },
      {
        "type": "video",
        "title": "How to Start Your ML Project",
        "url": "https://www.youtube.com/watch?v=0Lt9w-BxKFQ",
        "description": "A beginner-friendly guide to structuring and starting your own machine learning project from scratch."
      },
      {
        "type": "quote",
        "text": "“Research is creating new knowledge.” — Neil Armstrong"
      },
      {
        "type": "heading2",
        "id": "publish-and-showcase",
        "text": "Publish and Showcase Your Work"
      },
      {
        "type": "paragraph",
        "text": "Once your project is ready, publish it on GitHub with a well-written README including usage instructions, architecture diagrams, and video demos. Write a blog explaining your motivation, methodology, challenges, and outcomes. Platforms like Medium, Hashnode, or your own React-based blog site are perfect to showcase your technical storytelling skills."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "GitHub Repository",
            "desc": "Document your code and results clearly in public repositories."
          },
          {
            "label": "Blog Post",
            "desc": "Write about the end-to-end workflow — from problem definition to deployment."
          },
          {
            "label": "LinkedIn Post",
            "desc": "Summarize your project with visuals and share it with the tech community to build your personal brand."
          },
          {
            "label": "YouTube Demo",
            "desc": "Record a walkthrough or demo explaining the model and app."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "This will not only strengthen your portfolio but also prepare you for interviews, where you can walk through your project with clarity and confidence. Don’t forget to include performance metrics, visualizations, and even a roadmap for future improvements."
      },
      {
        "type": "heading2",
        "id": "conclusion",
        "text": "Conclusion"
      },
      {
        "type": "paragraph",
        "text": "This 12-month roadmap is carefully designed to transition you from a learner to a creator. By dedicating each month to a progressive learning goal, practicing real-world applications, and finally focusing on independent research and development, you prepare yourself for roles in data science, ML engineering, or academic research. Keep learning, stay curious, and let your final project be a testament to your journey."
      },
      {
        "type": "quote",
        "text": "“The best way to predict the future is to invent it.” — Alan Kay"
      }
    ]
  },
  {
    "slug": "machine-learning-6-months",
    "title": "Machine Learning - 6 Month Roadmap",
    "time": "6 months",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737823061/6_Months_roadmap_for_ML_yvm1yq.docx",
    "description": "Accelerated 6-month roadmap to learn Machine Learning with practical projects.",
    "keywords": [
      "machine learning",
      "6 month plan",
      "ML projects",
      "data science"
    ],
    "sections": [
      {
        "type": "heading1",
        "id": "month-1-overview",
        "text": "Month 1: Mastering the Basics – Python and Core Libraries"
      },
      {
        "type": "paragraph",
        "text": "To start your ML journey, a strong foundation in programming and data handling is essential. This month is dedicated to mastering Python and the essential libraries used in the machine learning workflow."
      },
      {
        "type": "heading2",
        "id": "python-intro",
        "text": "Python (3 Days)"
      },
      {
        "type": "video",
        "title": "Python for Beginners - Full Course",
        "url": "https://youtu.be/vLqTf2b6GZw?feature=shared",
        "description": "This tutorial covers Python fundamentals and is ideal for complete beginners."
      },
      {
        "type": "paragraph",
        "text": "Python is one of the most accessible yet powerful programming languages. Its simple syntax makes it a favorite among beginners, while its vast ecosystem supports advanced applications in machine learning, data science, web development, automation, and more."
      },
      {
        "type": "paragraph",
        "text": "In machine learning, Python is used throughout the pipeline — from data collection and preprocessing to model training, evaluation, and deployment. Python’s compatibility with tools like Jupyter Notebook and libraries like Pandas, NumPy, Scikit-learn, TensorFlow, and PyTorch make it indispensable in the ML domain."
      },
      {
        "type": "code",
        "language": "python",
        "code": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(\"Sum:\", result)"
      },
      {
        "type": "paragraph",
        "text": "Start with understanding data types like integers, floats, strings, and booleans. Learn how to use conditionals (`if`, `else`, `elif`), loops (`for`, `while`), and how to write functions. As you progress, dive into object-oriented programming to understand classes and inheritance — essential for structuring ML codebases effectively."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Syntax",
            "desc": "Learn the structure of Python code including indentation, variables, and comments."
          },
          {
            "label": "Control Flow",
            "desc": "Master decision making with if-else and iteration using loops."
          },
          {
            "label": "Functions",
            "desc": "Understand how to write reusable and organized blocks of code."
          },
          {
            "label": "Object-Oriented Programming",
            "desc": "Grasp the basics of classes, objects, inheritance, and encapsulation."
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q1 What is the correct syntax to define a function in Python?",
        "code": "",
        "options": [
          "function myFunc():",
          "def myFunc():",
          "create myFunc():",
          "func myFunc():"
        ],
        "correctIndex": 1
      },
      {
        "type": "paragraph",
        "text": "Tip: Practice daily on platforms like HackerRank, LeetCode, or Codewars. Try solving problems that involve string manipulation, data structures like lists and dictionaries, and basic algorithmic logic to strengthen your Python fluency."
      },
      {
        "type": "heading2",
        "id": "numpy-section",
        "text": "NumPy (2 Days)"
      },
      {
        "type": "video",
        "title": "NumPy Tutorial",
        "url": "https://youtu.be/Rbh1rieb3zc?feature=shared",
        "description": "Crash course on NumPy covering arrays, broadcasting, slicing, and mathematical functions."
      },
      {
        "type": "paragraph",
        "text": "NumPy, short for Numerical Python, is the foundational package for numerical computing in Python. It supports large, multi-dimensional arrays and matrices, along with a large library of high-level mathematical functions to operate on these arrays. In machine learning, NumPy is indispensable for handling numerical data efficiently, performing matrix operations, and enabling seamless integration with other data science libraries."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\n\n# Create a NumPy array\narr = np.array([10, 20, 30])\nprint('Original array:', arr)\n\n# Basic arithmetic\nprint('Add 5:', arr + 5)\nprint('Mean:', np.mean(arr))"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Array Creation",
            "desc": "Use np.array(), np.zeros(), np.ones(), and np.arange() to create arrays."
          },
          {
            "label": "Mathematical Operations",
            "desc": "Perform operations like sum, mean, standard deviation, and matrix multiplication."
          },
          {
            "label": "Broadcasting",
            "desc": "Apply operations on arrays of different shapes efficiently."
          },
          {
            "label": "Indexing and Slicing",
            "desc": "Extract or modify data within arrays easily."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "NumPy’s broadcasting feature allows you to perform arithmetic operations on arrays of different shapes without writing explicit loops. This makes your code more efficient and concise, a critical skill for ML tasks that involve huge datasets or high-dimensional arrays."
      },
      {
        "type": "heading2",
        "id": "pandas-section",
        "text": "Pandas (2 Days)"
      },
      {
        "type": "video",
        "title": "Pandas Tutorial",
        "url": "https://youtu.be/RhEjmHeDNoA?feature=shared",
        "description": "Beginner-friendly tutorial on Pandas for data manipulation and analysis."
      },
      {
        "type": "paragraph",
        "text": "Pandas is a high-level data manipulation tool built on NumPy. It provides powerful and flexible data structures—Series and DataFrame—for data analysis. In machine learning, Pandas is frequently used for loading datasets, handling missing values, feature engineering, and converting raw data into structured form for modeling."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import pandas as pd\n\ndata = {'Name': ['Alice', 'Bob'], 'Marks': [85, 90]}\ndf = pd.DataFrame(data)\nprint(df)\nprint('Names:', df['Name'])"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "DataFrame Creation",
            "desc": "Create DataFrames from dictionaries, lists, or CSV files."
          },
          {
            "label": "Data Inspection",
            "desc": "Use head(), info(), describe() to inspect data."
          },
          {
            "label": "Filtering",
            "desc": "Filter rows using conditions, logical operations."
          },
          {
            "label": "Missing Values",
            "desc": "Handle missing data using isnull(), fillna(), and dropna()."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "The true power of Pandas lies in its ability to perform chained operations in a readable and intuitive way. Whether you're cleaning messy data, joining datasets, or transforming features, Pandas provides functions that are both expressive and efficient."
      },
      {
        "type": "mcq",
        "question": "Q2 What is the primary data structure used in Pandas for tabular data?",
        "code": "",
        "options": ["Array", "Series", "DataFrame", "Matrix"],
        "correctIndex": 2
      },
      {
        "type": "heading2",
        "id": "scikit-learn",
        "text": "Scikit-learn (2 Days)"
      },
      {
        "type": "video",
        "title": "Scikit-learn Tutorial",
        "url": "https://youtu.be/0B5eIE_1vpU?feature=shared",
        "description": "Get started with Scikit-learn for building machine learning models in Python."
      },
      {
        "type": "paragraph",
        "text": "Scikit-learn is a widely used Python library for building and evaluating machine learning models. It provides a consistent and easy-to-use interface for a wide range of algorithms, including regression, classification, clustering, and dimensionality reduction. It also includes tools for preprocessing, model selection, and evaluation, making it a one-stop solution for many ML tasks."
      },
      {
        "type": "paragraph",
        "text": "Key concepts to focus on during these two days include supervised vs unsupervised learning, data splitting, and using pipelines to streamline preprocessing and modeling workflows. The library is built on top of other core packages like NumPy and SciPy, so having a foundation in those will be beneficial."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load dataset\niris = load_iris()\nX_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3)\n\n# Train model\nclf = RandomForestClassifier()\nclf.fit(X_train, y_train)\nprint(\"Accuracy:\", clf.score(X_test, y_test))"
      },
      {
        "type": "mcq",
        "question": "Q3 What does the train_test_split function in Scikit-learn do?",
        "code": "",
        "options": [
          "Splits data into categorical and numerical values",
          "Splits data into training and testing sets",
          "Splits data into features and labels",
          "Splits data into regression and classification types"
        ],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "id": "matplotlib",
        "text": "Matplotlib (2 Days)"
      },
      {
        "type": "video",
        "title": "Matplotlib Tutorial",
        "url": "https://youtu.be/3Xc3CA655Y4?feature=shared",
        "description": "Learn how to visualize data using Matplotlib, covering a wide range of plot types and customization techniques."
      },
      {
        "type": "paragraph",
        "text": "Matplotlib is the foundational visualization library in Python. It helps data scientists create static, animated, and interactive plots to better understand data and present results. Whether you are plotting a simple line graph or a complex multi-plot figure, Matplotlib gives you control over every element of your visualizations."
      },
      {
        "type": "paragraph",
        "text": "In these two days, focus on learning how to create various types of charts including line plots, bar charts, histograms, scatter plots, and subplots. You should also explore customizing plots with titles, labels, legends, and styles. Visualizing your data is not just about aesthetics—it helps in identifying patterns, anomalies, and improving model interpretability."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\nplt.plot(x, y, marker='o')\nplt.title('Prime Numbers')\nplt.xlabel('Index')\nplt.ylabel('Value')\nplt.grid(True)\nplt.show()"
      },
      {
        "type": "mcq",
        "question": "Q4 Which function is used to display the plot in Matplotlib?",
        "code": "",
        "options": ["plt.plot()", "plt.grid()", "plt.show()", "plt.figure()"],
        "correctIndex": 2
      },
      {
        "type": "heading1",
        "id": "month-2-overview",
        "text": "Month 2: Handling Real-World Data – SQL and Power BI"
      },
      {
        "type": "paragraph",
        "text": "With foundational programming skills in place, the next step in your data science journey is to effectively extract, manage, and present real-world data. This month emphasizes essential tools used in data engineering and business analytics: SQL and Power BI."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "SQL",
            "desc": "Used to query and manipulate structured data in relational databases."
          },
          {
            "label": "Power BI",
            "desc": "Used to create interactive dashboards and professional-grade business intelligence reports."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "sql-basics",
        "text": "SQL (8 Days)"
      },
      {
        "type": "video",
        "title": "SQL Tutorial",
        "url": "https://youtu.be/D_wNQR3LeeM?feature=shared",
        "description": "Beginner to advanced SQL crash course covering basic queries, joins, aggregations, and more."
      },
      {
        "type": "paragraph",
        "text": "SQL (Structured Query Language) is the industry-standard language for interacting with relational databases. As a data professional, knowing how to extract, filter, and transform data using SQL is fundamental."
      },
      {
        "type": "code",
        "language": "sql",
        "code": "SELECT name, COUNT(*) as order_count\nFROM orders\nGROUP BY name\nORDER BY order_count DESC;"
      },
      {
        "type": "paragraph",
        "text": "Start by mastering basic CRUD operations (Create, Read, Update, Delete), then move on to filtering data with WHERE clauses, sorting, and grouping results. Practice writing JOIN queries to combine data from multiple tables—an essential skill in real-world datasets."
      },
      {
        "type": "mcq",
        "question": "Q5 Which SQL clause is used to combine rows from two or more tables based on a related column?",
        "code": "",
        "options": ["GROUP BY", "JOIN", "ORDER BY", "SELECT"],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "id": "powerbi-overview",
        "text": "Power BI (7 Days)"
      },
      {
        "type": "video",
        "title": "Power BI Tutorial",
        "url": "https://youtu.be/C8TgduBEg2E?feature=shared",
        "description": "Complete tutorial on creating reports and dashboards using Power BI."
      },
      {
        "type": "paragraph",
        "text": "Power BI is a business intelligence and data visualization tool developed by Microsoft. It allows users to connect to multiple data sources, clean and transform data using Power Query, and create interactive dashboards and reports using drag-and-drop visual elements."
      },
      {
        "type": "paragraph",
        "text": "You’ll learn how to import data from Excel or SQL databases, transform and clean it using Power Query, create calculated columns and measures using DAX (Data Analysis Expressions), and design interactive dashboards that allow end-users to explore insights visually."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Power Query",
            "desc": "Used to import and clean data in Power BI."
          },
          {
            "label": "DAX",
            "desc": "A formula language to create custom calculations in Power BI reports."
          },
          {
            "label": "Visualizations",
            "desc": "Includes bar charts, pie charts, slicers, maps, and KPIs."
          }
        ]
      },
      {
        "type": "heading1",
        "id": "month-3-overview",
        "text": "Month 3: Mathematics for Machine Learning"
      },
      {
        "type": "paragraph",
        "text": "A strong grasp of mathematics is critical for understanding how machine learning algorithms work under the hood. This month is dedicated to developing your foundation in core mathematical concepts such as linear algebra, calculus, probability, and statistics. These concepts help in understanding model mechanics, improving tuning capabilities, and interpreting outputs effectively."
      },
      {
        "type": "heading2",
        "id": "math-for-ml-30-days",
        "text": "Mathematics for ML (30 Days)"
      },
      {
        "type": "video",
        "title": "Mathematics for Machine Learning",
        "url": "https://youtu.be/0z6AhrOSrRs?feature=shared",
        "description": "Comprehensive video tutorial that introduces essential math concepts used in ML."
      },
      {
        "type": "paragraph",
        "text": "This section will break down the key mathematical domains that every ML engineer should understand. Study the theory, work on exercises, and apply the concepts in code when possible."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Linear Algebra",
            "desc": "Understand vectors, matrices, matrix multiplication, dot products, eigenvalues, and eigenvectors."
          },
          {
            "label": "Calculus",
            "desc": "Focus on derivatives, partial derivatives, gradients, and how they are used in optimization algorithms like gradient descent."
          },
          {
            "label": "Probability and Statistics",
            "desc": "Learn about probability distributions, Bayes' theorem, hypothesis testing, and how randomness is modeled in ML."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "linear-algebra",
        "text": "Linear Algebra"
      },
      {
        "type": "paragraph",
        "text": "Linear algebra is the language of machine learning. Algorithms often rely on representing and transforming data as vectors and matrices. Understanding how to manipulate these structures is key to building and optimizing ML models."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\n\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[2, 0], [1, 2]])\nprint(np.dot(A, B))"
      },
      {
        "type": "heading2",
        "id": "calculus",
        "text": "Calculus"
      },
      {
        "type": "paragraph",
        "text": "Calculus helps us understand how a function changes. In ML, we use derivatives and gradients to minimize error functions and optimize models using techniques like gradient descent."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import sympy as sp\n\nx = sp.Symbol('x')\nf = x**2 + 3*x + 2\nderivative = sp.diff(f, x)\nprint(derivative)"
      },
      {
        "type": "heading2",
        "id": "probability-and-statistics",
        "text": "Probability and Statistics"
      },
      {
        "type": "paragraph",
        "text": "Probability and statistics are foundational for tasks like model evaluation, Bayesian modeling, and dealing with uncertainty. These tools help quantify confidence, model distributions, and make decisions based on data."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\nfrom scipy.stats import norm\n\n# Probability of a value under a normal distribution\nprint(norm.pdf(0, loc=0, scale=1))"
      },
      {
        "type": "mcq",
        "question": "Q6 Which concept is used to compute gradients in neural networks?",
        "code": "",
        "options": [
          "Eigenvectors",
          "Partial Derivatives",
          "Hypothesis Testing",
          "Matrix Inversion"
        ],
        "correctIndex": 1
      },
      {
        "type": "heading1",
        "id": "month-4-overview",
        "text": "Month 4: Applying Machine Learning Techniques"
      },
      {
        "type": "paragraph",
        "text": "This month marks a critical transition from foundational learning to applying machine learning techniques on real-world datasets. The focus will be on understanding core ML concepts and implementing supervised and unsupervised learning algorithms using Python libraries such as scikit-learn."
      },
      {
        "type": "heading2",
        "id": "ml-core-concepts",
        "text": "Machine Learning (15 Days)"
      },
      {
        "type": "video",
        "title": "Intro to Machine Learning",
        "url": "https://youtu.be/JxgmHe2NyeY?feature=shared",
        "description": "This video provides an overview of how machine learning works and what key concepts are involved."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Supervised Learning",
            "desc": "Train models on labeled datasets to make predictions. Includes algorithms like Linear Regression, Logistic Regression, and Decision Trees."
          },
          {
            "label": "Unsupervised Learning",
            "desc": "Work with unlabeled data to find hidden patterns or groupings. Includes K-Means Clustering and Principal Component Analysis (PCA)."
          },
          {
            "label": "Model Selection",
            "desc": "Choose the right algorithm for your data and problem domain."
          },
          {
            "label": "Training-Testing Split",
            "desc": "Separate data into training and testing subsets to evaluate model performance."
          },
          {
            "label": "Accuracy Metrics",
            "desc": "Use metrics like accuracy, precision, recall, and F1-score to measure performance."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Start with supervised learning. For regression problems, use Linear Regression to predict continuous values. For classification tasks, Logistic Regression is a strong baseline. Decision Trees help model non-linear relationships and are easy to visualize."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport pandas as pd\n\ndata = pd.read_csv('data.csv')\nX = data[['feature1', 'feature2']]\ny = data['target']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\nprint(\"MSE:\", mean_squared_error(y_test, predictions))"
      },
      {
        "type": "paragraph",
        "text": "Unsupervised learning techniques allow you to explore hidden patterns in the data. K-Means Clustering is useful for customer segmentation, while PCA helps reduce dimensionality and visualize high-dimensional data."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n# Assume X is your feature matrix\nkmeans = KMeans(n_clusters=3)\nkmeans.fit(X)\n\nplt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_)\nplt.title(\"K-Means Clustering\")\nplt.show()"
      },
      {
        "type": "mcq",
        "question": "Q7 Which technique is used to reduce the number of input variables in a dataset?",
        "code": "",
        "options": ["Logistic Regression", "K-Means", "PCA", "Decision Trees"],
        "correctIndex": 2
      },
      {
        "type": "heading1",
        "id": "month-5-overview",
        "text": "Month 5: Deep Learning Fundamentals"
      },
      {
        "type": "paragraph",
        "text": "Deep learning is the core driving force behind many recent AI breakthroughs. From voice assistants like Siri and Alexa to self-driving cars, deep learning enables machines to interpret and learn from data in ways that mimic the human brain. This month introduces the foundational concepts of deep learning and the essential tools used to implement deep learning models."
      },
      {
        "type": "heading2",
        "id": "deep-learning-intro",
        "text": "Deep Learning (15 Days)"
      },
      {
        "type": "video",
        "title": "Deep Learning Crash Course",
        "url": "https://youtu.be/d2kxUVwWWwU?feature=shared",
        "description": "An intuitive introduction to deep learning with real-world examples."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Neural Network Architecture",
            "desc": "Understand layers, neurons, activation functions, and forward pass."
          },
          {
            "label": "Backpropagation",
            "desc": "Learn how neural networks learn by adjusting weights via gradient descent."
          },
          {
            "label": "Convolutional Neural Networks (CNNs)",
            "desc": "Used for processing image data, they are the backbone of modern computer vision."
          },
          {
            "label": "Recurrent Neural Networks (RNNs)",
            "desc": "Designed for sequence prediction tasks such as time series and natural language."
          },
          {
            "label": "TensorFlow and PyTorch",
            "desc": "Popular frameworks for building and training deep learning models."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Neural networks are composed of layers of interconnected nodes, or 'neurons', which are modeled loosely after the human brain. A simple neural network includes an input layer, one or more hidden layers, and an output layer. Each connection has an associated weight, which adjusts during training through the process of backpropagation to minimize prediction error."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import torch\nimport torch.nn as nn\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.fc1 = nn.Linear(10, 5)\n        self.fc2 = nn.Linear(5, 1)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        return self.fc2(x)\n\nmodel = Net()\nprint(model)"
      },
      {
        "type": "paragraph",
        "text": "CNNs are specifically designed to work with image data. They utilize convolutional layers to detect patterns such as edges, shapes, and textures in images. These patterns are then used to perform tasks like image classification and object detection."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import tensorflow as tf\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])"
      },
      {
        "type": "paragraph",
        "text": "RNNs are useful for analyzing sequential data, such as text or time-series information. Unlike traditional networks, they maintain memory across inputs, allowing them to capture temporal dependencies."
      },
      {
        "type": "code",
        "language": "python",
        "code": "rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=1, batch_first=True)\nx = torch.randn(3, 5, 10)  # (batch, seq_len, input_size)\noutput, hn = rnn(x)"
      },
      {
        "type": "paragraph",
        "text": "To build and train deep learning models, TensorFlow and PyTorch are the most popular frameworks. TensorFlow offers robust deployment options and is backed by Google, while PyTorch is favored in academic research for its simplicity and flexibility."
      },
      {
        "type": "mcq",
        "question": "Q8 Which type of neural network is best suited for image data?",
        "code": "",
        "options": [
          "Recurrent Neural Network",
          "Convolutional Neural Network",
          "Fully Connected Network",
          "Autoencoder"
        ],
        "correctIndex": 1
      },
      {
        "type": "heading1",
        "id": "month-6-overview",
        "text": "Month 6: Projects and Interview Preparation"
      },
      {
        "type": "paragraph",
        "text": "After five months of dedicated learning, you've built a strong theoretical and practical foundation in machine learning. Now it's time to apply everything through hands-on projects and prepare strategically for interviews to land your first role in data science or ML engineering."
      },
      {
        "type": "heading2",
        "id": "interview-preparation",
        "text": "Interview Questions (10 Days)"
      },
      {
        "type": "paragraph",
        "text": "In this phase, focus on brushing up your core ML and deep learning concepts. Go through common interview questions, understand the rationale behind different algorithms, and prepare to discuss trade-offs and performance metrics."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Machine Learning",
            "desc": "https://www.geeksforgeeks.org/machine-learning-interview-questions/"
          },
          {
            "label": "Deep Learning",
            "desc": "https://www.geeksforgeeks.org/deep-learning-interview-questions/"
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "When preparing for interviews, emphasize explaining your approach to problem solving, why you chose a specific algorithm, and how you evaluated your models. Clear articulation of your thought process is key."
      },
      {
        "type": "heading2",
        "id": "capstone-projects",
        "text": "Capstone Projects (45 Days)"
      },
      {
        "type": "video",
        "title": "Machine Learning Project Series",
        "url": "https://www.youtube.com/watch?v=S_F_c9e2bz4&list=PLZoTAELRMXVPS-dOaVbAux22vzqdgoGhG",
        "description": "Step-by-step practical ML project tutorials on YouTube."
      },
      {
        "type": "paragraph",
        "text": "Now is the time to consolidate your skills by building and deploying full machine learning projects. These projects will not only improve your technical expertise but also serve as a portfolio for recruiters and hiring managers."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Email Spam Classifier",
            "desc": "Build a model that classifies emails as spam or not spam using NLP techniques and classification algorithms."
          },
          {
            "label": "House Price Prediction",
            "desc": "Create a regression model to estimate house prices based on historical data."
          },
          {
            "label": "Movie Recommendation System",
            "desc": "Use collaborative filtering or content-based filtering to suggest movies to users."
          },
          {
            "label": "Digit Recognition using CNNs",
            "desc": "Use convolutional neural networks to identify handwritten digits from the MNIST dataset."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Make sure each project is well-documented with a README, clear code structure, and appropriate visualizations. Host your work on GitHub or a personal website to enhance your professional visibility."
      },
      {
        "type": "mcq",
        "question": "Q9 Which of the following is a common metric used for classification model evaluation?",
        "code": "",
        "options": ["Mean Squared Error", "R2 Score", "Accuracy", "RMSE"],
        "correctIndex": 2
      },
      {
        "type": "heading2",
        "id": "final-revision-projects",
        "text": "Final Revision and Independent Projects (40 Days)"
      },
      {
        "type": "paragraph",
        "text": "The final phase of your 6-month machine learning roadmap is dedicated to consolidating your skills and creating independent work that reflects your learning journey. Over the next 40 days, you will focus on rebuilding earlier projects, developing original ideas, and contributing to the open-source ecosystem. This phase is all about reinforcing concepts through practical application and preparing for real-world scenarios."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Rebuild Earlier Projects",
            "desc": "Revisiting earlier projects helps reinforce your understanding and allows you to improve your code using best practices."
          },
          {
            "label": "Develop Your Own Ideas",
            "desc": "Think of problems you're passionate about solving. Start by exploring datasets or identifying daily life challenges that machine learning can address."
          },
          {
            "label": "Contribute to Open Source",
            "desc": "Join GitHub repositories and ML communities where beginners are welcome. Look for 'good first issue' tags and submit your contributions."
          },
          {
            "label": "Create a Personal Portfolio",
            "desc": "Build a website to showcase your ML projects, GitHub repositories, blog articles, and your resume. This will act as a one-stop destination for potential employers."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Working independently fosters problem-solving, research, and creativity—skills highly valued in ML roles. While it may be challenging at first, consistency and exploration are key to breakthroughs."
      },
      {
        "type": "heading2",
        "id": "final-advice",
        "text": "Final Advice for Students"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Stay Consistent",
            "desc": "Consistency beats intensity. Even if it's just 30 minutes a day, make learning part of your routine."
          },
          {
            "label": "Practice Daily",
            "desc": "Continue practicing problems on platforms like LeetCode, HackerRank, or Kaggle to improve coding speed and accuracy."
          },
          {
            "label": "Build While You Learn",
            "desc": "Learning by doing helps cement complex concepts. Use every learning module as an opportunity to build."
          },
          {
            "label": "Join ML Communities",
            "desc": "Be active on LinkedIn, GitHub, and Discord servers. Networking exposes you to job opportunities and collaborative projects."
          },
          {
            "label": "Master the Fundamentals",
            "desc": "Don't chase every new tool. Understanding concepts like gradient descent, overfitting, and evaluation metrics will serve you better long-term."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "By the end of these six months, you'll have not just theoretical knowledge but also a solid portfolio and industry-relevant experience. Whether you're targeting internships, research roles, or full-time jobs, this journey will give you the confidence and competence to succeed in the machine learning landscape."
      }
    ]
  },
  {
    "slug": "machine-learning-3-months",
    "title": "Machine Learning - 3 Month Roadmap",
    "time": "3 months",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737823063/3_Months_ML_Plan_vpx8f4.docx",
    "description": "Quick-start 3-month intensive plan to dive deep into ML fundamentals and practice.",
    "keywords": [
      "machine learning",
      "3 month plan",
      "fast track ML",
      "AI beginner"
    ],
    "sections": [
      {
        "type": "heading1",
        "text": "Month 1: Foundational Tools and Core Libraries",
        "id": "foundational-tools"
      },
      {
        "type": "paragraph",
        "text": "Month 1 of the Machine Learning roadmap lays the groundwork for everything that follows. It is dedicated to learning the essential tools and libraries necessary for data manipulation, computation, and visualization. You'll explore Python programming, numerical and data handling libraries like NumPy and Pandas, and move into essential tools like Scikit-learn and Matplotlib. These libraries form the base for building and evaluating machine learning models efficiently."
      },
      {
        "type": "heading2",
        "text": "Python (5 Days)",
        "id": "python"
      },
      {
        "type": "video",
        "title": "Python for Beginners",
        "url": "https://youtu.be/vLqTf2b6GZw?feature=shared",
        "description": "Learn Python fundamentals like variables, loops, functions, OOP, and more in this complete beginner-friendly tutorial."
      },
      {
        "type": "paragraph",
        "text": "Python is the cornerstone of machine learning development. With its readable syntax and vast ecosystem of libraries, Python empowers data scientists and developers to rapidly build ML pipelines. Focus on mastering variables, control structures, data types, lists, dictionaries, file handling, and object-oriented programming. These fundamentals help in writing modular, reusable code which is crucial when building ML workflows."
      },
      {
        "type": "paragraph",
        "text": "During your first few days, practice Python by solving small coding tasks. Use Python's built-in data structures like lists, tuples, dictionaries, and sets to solve simple algorithmic problems. Explore control flows such as if-else, loops, and exception handling to build confidence. Aim to write functions for every logical block and get comfortable with Python's indentation-based syntax. Understand how functions work with arguments and return values."
      },
      {
        "type": "paragraph",
        "text": "Once you're confident with the basics, begin exploring Python's support for object-oriented programming (OOP). Learn how to define classes, create objects, and use constructors, inheritance, and encapsulation. These concepts are heavily used in structuring machine learning projects and will help you organize your code for scalability and maintainability."
      },
      {
        "type": "code",
        "language": "python",
        "code": "class Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def speak(self):\n        return f\"{self.name} says woof!\"\n\n\nbuddy = Dog(\"Buddy\", 3)\nprint(buddy.speak())"
      },
      {
        "type": "paragraph",
        "text": "This code demonstrates how to define a simple class in Python. You define a constructor using `__init__`, create instance variables using `self`, and add methods like `speak()` to interact with object data. Understanding this pattern is key to writing robust and modular Python code for ML applications."
      },
      {
        "type": "mcq",
        "question": "Q1 What will be the output of the following code?",
        "code": "def greet(name):\n    return \"Hello \" + name\n\nprint(greet(\"Alice\"))",
        "options": ["Hello Alice", "Hi Alice", "Alice Hello", "Error"],
        "correctIndex": 0
      },
      {
        "type": "heading2",
        "text": "NumPy (2 Days)",
        "id": "numpy"
      },
      {
        "type": "video",
        "title": "NumPy Tutorial",
        "url": "https://youtu.be/Rbh1rieb3zc?feature=shared",
        "description": "Learn NumPy basics, arrays, broadcasting, and vectorized operations that are essential for numerical computations."
      },
      {
        "type": "paragraph",
        "text": "NumPy is the foundational library for numerical computing in Python. It provides support for arrays, matrices, and a wide range of mathematical functions. Understanding NumPy is critical because many machine learning libraries like TensorFlow and scikit-learn are built on top of it."
      },
      {
        "type": "paragraph",
        "text": "You’ll begin by learning how to create one-dimensional and multi-dimensional arrays using `np.array()`. Then explore functions like `np.zeros()`, `np.ones()`, and `np.arange()` for structured array generation. Learn to index, slice, reshape, and manipulate arrays efficiently."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import numpy as np\n\n# Creating arrays\narr = np.array([1, 2, 3])\nprint('1D Array:', arr)\n\nmatrix = np.array([[1, 2], [3, 4]])\nprint('2D Matrix:\\n', matrix)\n\n# Array operations\nprint('Element-wise addition:', arr + 5)\nprint('Matrix transpose:\\n', matrix.T)"
      },
      {
        "type": "paragraph",
        "text": "Broadcasting in NumPy allows operations between arrays of different shapes. This enables efficient arithmetic computations without explicit loops. It’s particularly useful for manipulating images, tensors, or any large-scale ML data."
      },
      {
        "type": "code",
        "language": "python",
        "code": "a = np.array([1, 2, 3])\nb = 2\nprint('Broadcasted Result:', a * b)"
      },
      {
        "type": "table",
        "headers": ["Function", "Description"],
        "rows": [
          ["np.array()", "Creates an array from lists or tuples"],
          ["np.zeros()", "Creates an array filled with zeros"],
          ["np.ones()", "Creates an array filled with ones"],
          ["np.arange()", "Generates a range of numbers"],
          ["np.reshape()", "Changes the shape of an array"],
          ["np.mean()", "Calculates the mean of array elements"]
        ]
      },
      {
        "type": "paragraph",
        "text": "NumPy also supports advanced operations like linear algebra, random number generation, and Fourier transforms through modules like `numpy.linalg` and `numpy.random`. Mastery of these tools gives you the ability to work on real-world datasets and implement algorithms from scratch."
      },
      {
        "type": "mcq",
        "question": "Q2 What will be the output of the following code?",
        "code": "import numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1:3])",
        "options": ["[1, 2]", "[2, 3]", "[3, 4]", "[1, 2, 3]"],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "text": "Pandas (2 Days)",
        "id": "pandas"
      },
      {
        "type": "video",
        "title": "Pandas Full Course",
        "url": "https://youtu.be/RhEjmHeDNoA?feature=shared",
        "description": "Master Pandas for data analysis and transformation, including DataFrames, missing values, grouping, and merging."
      },
      {
        "type": "paragraph",
        "text": "Pandas provides fast, flexible data structures such as Series and DataFrames, making it ideal for real-world data analysis. Learn how to load data from various sources, clean and preprocess it, handle missing values, group and aggregate data, and merge multiple datasets. These skills are vital in preparing your dataset before feeding it into any machine learning model."
      },
      {
        "type": "paragraph",
        "text": "Key Pandas operations include reading data from CSV or Excel files using functions like `read_csv()` and `read_excel()`, selecting specific columns, filtering rows with conditions, and chaining multiple methods for efficient transformations. You'll also become familiar with indexing, reindexing, and slicing, which are essential for handling large datasets with precision."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import pandas as pd\n\n# Load dataset\ndf = pd.read_csv('data.csv')\n\n# Handle missing values\ndf = df.fillna(method='ffill')\n\n# Group by category and calculate mean\nsummary = df.groupby('category')['value'].mean()\n\n# Merge with another dataframe\nmerged_df = pd.merge(df1, df2, on='id')"
      },
      {
        "type": "paragraph",
        "text": "In practice, Pandas is used to perform exploratory data analysis (EDA), which includes summary statistics, correlation, and visualization preparation. A strong grasp of Pandas makes it significantly easier to prototype and test machine learning pipelines efficiently."
      },
      {
        "type": "table",
        "headers": ["Function", "Purpose"],
        "rows": [
          ["read_csv()", "Reads a CSV file into a DataFrame"],
          ["fillna()", "Fills NA/NaN values using the specified method"],
          ["groupby()", "Groups data using a mapper or by series of columns"],
          ["merge()", "Combines DataFrames based on common columns"]
        ]
      },
      {
        "type": "mcq",
        "question": "Q3 Which Pandas function is used to combine two DataFrames based on a common column?",
        "code": "",
        "options": ["concat()", "merge()", "join()", "groupby()"],
        "correctIndex": 1
      },
      {
        "type": "heading2",
        "text": "Scikit-learn (2 Days)",
        "id": "scikit-learn"
      },
      {
        "type": "video",
        "title": "Scikit-learn Crash Course",
        "url": "https://youtu.be/0B5eIE_1vpU?feature=shared",
        "description": "Understand and build basic ML models using scikit-learn, from data splitting to model tuning."
      },
      {
        "type": "paragraph",
        "text": "Scikit-learn is one of the most powerful and accessible machine learning libraries in Python. It provides simple and efficient tools for data mining, data analysis, and machine learning modeling. What sets it apart is its consistent API and ease of use across a wide range of algorithms, which allows beginners and professionals alike to implement models without unnecessary boilerplate code."
      },
      {
        "type": "paragraph",
        "text": "Start by learning how to load your dataset and perform train-test splitting using `train_test_split`. Then, explore commonly used models such as Logistic Regression for classification problems, Linear Regression for regression tasks, and Decision Trees for both. Scikit-learn also includes powerful tools for feature selection, data transformation (like normalization or one-hot encoding), and pipeline construction."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Example dataset\nX = [[0, 0], [1, 1], [2, 2], [3, 3]]\ny = [0, 0, 1, 1]\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)\n\n# Train model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Predict\npredictions = model.predict(X_test)\nprint(\"Accuracy:\", accuracy_score(y_test, predictions))"
      },
      {
        "type": "paragraph",
        "text": "Another critical component of scikit-learn is its built-in methods for model evaluation. Metrics like accuracy, precision, recall, F1-score, and ROC-AUC can be calculated using just a few lines of code. You'll also use techniques such as cross-validation to assess the generalizability of your model and GridSearchCV for hyperparameter tuning."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Classification",
            "desc": "Use Logistic Regression, KNN, Decision Trees, and more to solve classification problems."
          },
          {
            "label": "Regression",
            "desc": "Apply models like Linear Regression and Ridge Regression to predict continuous outcomes."
          },
          {
            "label": "Model Selection",
            "desc": "Use train-test split, cross-validation, and GridSearchCV to evaluate and tune models."
          },
          {
            "label": "Preprocessing",
            "desc": "Standardize features, encode categorical variables, and handle missing data efficiently."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "By the end of your 2-day deep dive into Scikit-learn, you should be capable of building supervised learning pipelines, selecting the right model for the task, and evaluating performance with real-world datasets. These skills are directly applicable in interviews, hackathons, and practical machine learning projects."
      },
      {
        "type": "heading2",
        "text": "Matplotlib (2 Days)",
        "id": "matplotlib"
      },
      {
        "type": "video",
        "title": "Matplotlib Tutorial",
        "url": "https://youtu.be/3Xc3CA655Y4?feature=shared",
        "description": "Learn how to create visualizations using Matplotlib to make your data and models easier to understand."
      },
      {
        "type": "paragraph",
        "text": "Matplotlib is a foundational visualization library in Python, especially important for data scientists and machine learning practitioners. It allows you to create a wide range of static, animated, and interactive plots. With Matplotlib, you can visualize trends in your data, compare different categories, and identify patterns that aren’t obvious from numerical analysis alone."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Line Plot",
            "desc": "Used to visualize trends over time or continuous data."
          },
          {
            "label": "Bar Chart",
            "desc": "Best for comparing categorical data."
          },
          {
            "label": "Histogram",
            "desc": "Great for showing the distribution of numerical data."
          },
          {
            "label": "Scatter Plot",
            "desc": "Used to identify relationships between two variables."
          },
          {
            "label": "Customization",
            "desc": "Add titles, labels, grids, and legends for clarity."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Throughout these two days, you will learn how to plot various chart types including line plots, bar graphs, histograms, scatter plots, and more. You will also explore how to label axes, add titles, control figure size, use legends, and save plots. These skills are vital for presenting your findings and interpreting model outputs effectively."
      },
      {
        "type": "code",
        "language": "python",
        "code": "import matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [10, 20, 25, 30, 40]\n\nplt.plot(x, y, label='Growth')\nplt.xlabel('Time')\nplt.ylabel('Value')\nplt.title('Simple Line Plot')\nplt.legend()\nplt.grid(True)\nplt.show()"
      },
      {
        "type": "table",
        "headers": ["Chart Type", "Best Use"],
        "rows": [
          ["Line Plot", "Trends over time"],
          ["Bar Chart", "Comparing categories"],
          ["Histogram", "Distribution of data"],
          ["Scatter Plot", "Correlation between variables"]
        ]
      },
      {
        "type": "paragraph",
        "text": "By mastering Matplotlib, you enhance your ability to communicate complex data and results in an accessible way. When paired with Pandas or NumPy, Matplotlib becomes even more powerful for creating dynamic visualizations from structured datasets. Use visualization not just for presentation but as a tool to explore and validate your models during development."
      },
      {
        "type": "mcq",
        "question": "Q4 Which function is used to display a plot in Matplotlib?",
        "code": "",
        "options": [
          "plt.show()",
          "plot.display()",
          "plt.graph()",
          "show.plot()"
        ],
        "correctIndex": 0
      },
      {
        "type": "heading1",
        "text": "Month 2: Core Machine Learning Algorithms and Concepts",
        "id": "machine-learning"
      },
      {
        "type": "paragraph",
        "text": "Month 2 is dedicated to building a solid understanding of machine learning algorithms and how to implement them using Python. You’ll transition from just using libraries to understanding how these algorithms work under the hood and how to select the best model for a given task."
      },
      {
        "type": "heading2",
        "text": "Machine Learning (20 Days)",
        "id" : "machine-learning-basic"
      },
      {
        "type": "video",
        "title": "Machine Learning Concepts Tutorial",
        "url": "https://www.youtube.com/watch?v=N5fSpaaxoZc",
        "description": "A comprehensive tutorial covering core ML algorithms, evaluation metrics, and model selection techniques."
      },
      {
        "type": "paragraph",
        "text": "Machine Learning (ML) is broadly divided into supervised and unsupervised learning. Supervised learning uses labeled data to train models, while unsupervised learning explores patterns in unlabeled data. This month, you’ll implement both types and learn when to use which."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Linear Regression",
            "desc": "Used to predict continuous values. Understand the concept of best-fit lines and loss functions."
          },
          {
            "label": "Logistic Regression",
            "desc": "Used for binary classification problems. Learn about the sigmoid function and decision boundaries."
          },
          {
            "label": "Decision Trees",
            "desc": "Non-linear models that split data based on feature values. Learn about entropy, information gain, and tree pruning."
          },
          {
            "label": "K-Nearest Neighbors (KNN)",
            "desc": "A lazy learner that classifies data points based on proximity to other labeled points."
          },
          {
            "label": "K-Means Clustering",
            "desc": "An unsupervised method to group similar data points based on distance."
          },
          {
            "label": "PCA (Principal Component Analysis)",
            "desc": "A dimensionality reduction technique to project data into lower dimensions while preserving variance."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "You will also learn about critical model evaluation concepts such as the Bias-Variance Trade-off, which explains the tension between underfitting and overfitting. Understanding how to split data (train/test/validation), scale features, and tune hyperparameters is essential for model success."
      },
      {
        "type": "table",
        "headers": ["Metric", "Use Case"],
        "rows": [
          ["Accuracy", "Overall correctness of classification"],
          ["Precision", "How many predicted positives were correct"],
          ["Recall", "How many actual positives were identified"],
          ["ROC-AUC", "Measures model’s ability to distinguish between classes"]
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\nmodel = LogisticRegression()\nmodel.fit(X_train_scaled, y_train)\npredictions = model.predict(X_test_scaled)\n\nprint('Accuracy:', accuracy_score(y_test, predictions))\nprint('Precision:', precision_score(y_test, predictions))\nprint('Recall:', recall_score(y_test, predictions))"
      },
      {
        "type": "mcq",
        "question": "Q5 Which technique is used for reducing the number of features while retaining the essential variance in the dataset?",
        "code": "",
        "options": ["K-Means", "Logistic Regression", "PCA", "Decision Trees"],
        "correctIndex": 2
      },
      {
        "type": "paragraph",
        "text": "Model selection is the process of choosing the most appropriate model and tuning it to perform optimally on a specific task. You’ll learn how to use techniques like cross-validation to prevent overfitting and get reliable performance estimates."
      },
      {
        "type": "paragraph",
        "text": "By the end of Month 2, you should be confident in your ability to build supervised and unsupervised ML models, evaluate their performance, and understand the math and reasoning behind them. You’ll be ready to tackle real-world datasets and prepare for project development in Month 3."
      },
      {
        "type": "heading1",
        "text": "Month 3: Interview Preparation, Projects, and Review",
        "id": "month3"
      },
      {
        "type": "paragraph",
        "text": "The final month of this roadmap is where all your learning converges into action. This phase emphasizes revision, project building, and mock interviews to strengthen your portfolio and boost your confidence. You’ll go beyond passive learning and start applying concepts by building end-to-end machine learning pipelines, conducting model evaluations, and addressing real-world problems."
      },
      {
        "type": "heading2",
        "text": "1. Interview Preparation (7 Days)",
        "id": "ml-interview-questions"
      },
      {
        "type": "paragraph",
        "text": "Interview preparation is essential for landing a job in the machine learning space. In this week, focus on reviewing theoretical and practical ML questions that are commonly asked during interviews. Spend time understanding the underlying principles, algorithms, and how to articulate their applications in a business context."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Types of Learning",
            "desc": "Understand the differences between supervised, unsupervised, and reinforcement learning."
          },
          {
            "label": "Overfitting & Underfitting",
            "desc": "Know how to diagnose and prevent these using techniques like regularization and cross-validation."
          },
          {
            "label": "Model Evaluation",
            "desc": "Master evaluation metrics such as accuracy, precision, recall, F1-score, and ROC-AUC."
          },
          {
            "label": "Feature Engineering",
            "desc": "Discuss techniques like encoding, scaling, dimensionality reduction, and feature selection."
          },
          {
            "label": "Deployment",
            "desc": "Basic understanding of how to serve a model using Flask, FastAPI, or cloud services."
          },
          {
            "label": "Resources",
            "desc": "https://www.geeksforgeeks.org/machine-learning-interview-questions"
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q6 What is the primary reason to use regularization in machine learning?",
        "code": "",
        "options": [
          "To increase training accuracy",
          "To prevent underfitting",
          "To prevent overfitting",
          "To improve the speed of training"
        ],
        "correctIndex": 2
      },
      {
        "type": "paragraph",
        "text": "Use resources like GeeksforGeeks ML Interview Questions, StrataScratch, and mock interview platforms like Pramp or Interviewing.io to practice real questions. Document the questions and answers in a personal repo to revise later."
      },
      {
        "type": "heading2",
        "text": "2. Self-Projects and Revision (30 Days)",
        "id": "self-projects"
      },
      {
        "type": "paragraph",
        "text": "The best way to demonstrate your skills to recruiters is through real projects. This month should focus on applying machine learning in projects that solve practical problems. Choose problems from datasets available on Kaggle, UCI, or build your own with data scraping techniques."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Build Projects",
            "desc": "Start with clear problem definitions. Build classification (e.g., email spam detection), regression (e.g., house price prediction), or clustering models (e.g., customer segmentation)."
          },
          {
            "label": "End-to-End Pipelines",
            "desc": "Include data ingestion, preprocessing, exploratory analysis, feature selection, model training, evaluation, and deployment."
          },
          {
            "label": "Version Control",
            "desc": "Use Git to manage versions and document the process using README files and Jupyter notebooks."
          },
          {
            "label": "Documentation",
            "desc": "Explain your problem, approach, model selection, results, and future improvements in markdown files."
          },
          {
            "label": "Deployment",
            "desc": "Deploy your project using Flask/FastAPI and host it on platforms like Heroku, Render, or Hugging Face Spaces."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint('Accuracy:', accuracy_score(y_test, y_pred))"
      },
      {
        "type": "table",
        "headers": ["Project Type", "Tech Stack", "Dataset"],
        "rows": [
          ["Spam Classifier", "Sklearn, Pandas, Flask", "UCI SMS Spam Dataset"],
          [
            "House Price Predictor",
            "Scikit-Learn, NumPy, Flask",
            "Kaggle Housing Dataset"
          ],
          [
            "Customer Segmentation",
            "Scikit-Learn, Seaborn",
            "Mall Customers Dataset"
          ]
        ]
      },
      {
        "type": "paragraph",
        "text": "Revisit core machine learning algorithms and improve the areas where you struggled previously. Whether it’s understanding how PCA works or how to tune hyperparameters using GridSearchCV, reinforcement at this stage is important."
      },
      {
        "type": "paragraph",
        "text": "This month is also the best time to create or polish your GitHub portfolio. Make sure every project you’ve done is publicly available, includes a good README, has screenshots or live links, and contains well-documented code. Include real data if possible and write short blogs or walkthroughs on platforms like Hashnode, Medium, or LinkedIn."
      },
      {
        "type": "heading2",
        "text": "Final Thoughts",
        "id": "final-thoughts"
      },
      {
        "type": "paragraph",
        "text": "The third month is where you build your identity as a data practitioner. Focus on quality over quantity. A single well-structured and deployed project with clear explanation often outweighs multiple unfinished attempts. Regularly revise concepts, contribute to open-source repositories or discussions on GitHub, and try explaining ML topics to others—it reinforces your learning."
      }
    ]
  },
  {
    "slug": "full-stack-dev-1-year",
    "title": "Full Stack Development - 1 Year Plan",
    "time": "1 year",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737822877/1_year_cridl0.docx",
    "description": "Detailed 1-year roadmap to become a proficient Full Stack Developer.",
    "keywords": [
      "full stack",
      "web development",
      "frontend",
      "backend",
      "roadmap"
    ],
    "sections": [
      {
        "type": "heading1",
        "id": "setup-and-frontend-fundamentals",
        "text": "Months 1–2: Setup and Frontend Fundamentals"
      },
      {
        "type": "paragraph",
        "text": "Begin your journey into web development by mastering the foundational tools and languages that power the web. In the first two months, focus on setting up a productive development environment and learning the essentials of HTML and CSS, the building blocks of the web."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Git and VS Code",
            "desc": "Understand how to use Git for version control and GitHub for collaboration. Set up VS Code as your development environment, with recommended extensions and shortcuts."
          },
          {
            "label": "HTML",
            "desc": "Learn the basics of webpage structure using tags, forms, semantic elements, media, and layout structure."
          },
          {
            "label": "CSS",
            "desc": "CSS allows you to style and layout pages. Focus on Flexbox, Grid, transitions, responsive design using media queries, and modern styling techniques."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "git-vscode-setup",
        "text": "Git and VS Code Setup"
      },
      {
        "type": "video",
        "title": "Git & VS Code Full Tutorial",
        "url": "https://youtu.be/uaeKhfhYE0U?feature=shared",
        "description": "This tutorial walks you through installing Git, setting up VS Code, using GitHub, and working with version control step-by-step."
      },
      {
        "type": "paragraph",
        "text": "Version control is an essential skill for every developer. Git is a powerful tool that helps track changes in your code, collaborate with teams, and manage your projects efficiently. Paired with GitHub, you can store your repositories online, contribute to open-source projects, and showcase your work."
      },
      {
        "type": "paragraph",
        "text": "Visual Studio Code (VS Code) is a popular and lightweight source code editor developed by Microsoft. With its built-in Git support and rich extension ecosystem, it offers a seamless development experience for web and software projects."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Install Git",
            "desc": "Download Git from https://git-scm.com/ and follow the installation steps for your OS."
          },
          {
            "label": "Create a GitHub Account",
            "desc": "Sign up at https://github.com/ to host and manage your repositories."
          },
          {
            "label": "Install VS Code",
            "desc": "Get it from https://code.visualstudio.com/ and install it like any regular software."
          },
          {
            "label": "Recommended Extensions",
            "desc": "Install extensions like GitLens, Prettier, and Live Server for an enhanced experience."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "By mastering Git and VS Code, you’ll be able to maintain cleaner project histories, roll back changes with ease, and collaborate with developers worldwide—all from a powerful, user-friendly editor."
      },
      {
        "type": "heading2",
        "id": "html",
        "text": "HTML (5 Days)"
      },
      {
        "type": "video",
        "title": "HTML Crash Course",
        "url": "https://youtu.be/BsDoLVMnmZs?feature=shared",
        "description": "A comprehensive HTML tutorial covering everything from tags to semantic structure."
      },
      {
        "type": "paragraph",
        "text": "HTML (HyperText Markup Language) is used to create the structure of web pages. Over the course of 5 days, you will learn how to use HTML elements like headings, paragraphs, images, forms, and semantic tags to create structured and accessible content."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First Page</title>\n  </head>\n  <body>\n    <h1>Welcome to Web Development</h1>\n    <p>This is a paragraph of text on my first webpage.</p>\n  </body>\n</html>"
      },
      {
        "type": "paragraph",
        "text": "Each HTML document begins with the `<!DOCTYPE html>` declaration, which tells the browser to expect HTML5 content. Inside the `<html>` tag, the page is split into two main sections: `<head>` for metadata, and `<body>` for visible content. Tags like `<h1>` through `<h6>` define headings, while `<p>` creates paragraphs. You can add images using `<img>`, create links with `<a>`, and capture user input using forms."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "headings",
            "desc": "Use <h1> to <h6> to define titles and subheadings."
          },
          {
            "label": "Paragraphs",
            "desc": "Use <p> to write text content clearly and structurally."
          },
          {
            "label": "Links",
            "desc": "Use <a href='URL'>Link</a> to navigate to other pages or sites."
          },
          {
            "label": "Images",
            "desc": "Use <img src='path' alt='description'> to display images."
          },
          {
            "label": "Forms",
            "desc": "Collect user input using <form>, <input>, and <textarea>."
          }
        ]
      },
      {
        "type": "code",
        "language": "html",
        "code": "<form action=\"/submit\" method=\"post\">\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n  <input type=\"submit\" value=\"Submit\">\n</form>"
      },
      {
        "type": "quote",
        "text": "HTML is the skeleton of a webpage; CSS is the skin, and JavaScript brings it to life."
      },
      {
        "type": "mcq",
        "question": "Q1 What does the <form> tag in HTML do?",
        "code": "",
        "options": [
          "Defines a paragraph",
          "Creates a table",
          "Collects user input",
          "Adds an image"
        ],
        "correctIndex": 2
      },
      {
        "type": "heading2",
        "id": "css",
        "text": "CSS (20 Days)"
      },
      {
        "type": "video",
        "title": "CSS Full Course",
        "url": "https://youtu.be/dSJM4Gyh8jE?feature=shared",
        "description": "Master CSS for layouts, transitions, and responsive design."
      },
      {
        "type": "paragraph",
        "text": "CSS (Cascading Style Sheets) is used to style and layout HTML elements. Spend the next 20 days understanding how to use classes, selectors, Flexbox, Grid, media queries, animations, and transitions to create visually appealing and responsive web pages."
      },
      {
        "type": "code",
        "language": "css",
        "code": "body {\n  font-family: Arial, sans-serif;\n  background-color: #f4f4f4;\n  margin: 0;\n  padding: 0;\n}\nh1 {\n  color: #333;\n  text-align: center;\n  margin-top: 20px;\n}"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Flexbox",
            "desc": "A one-dimensional layout method for aligning items in rows or columns."
          },
          {
            "label": "Grid",
            "desc": "A two-dimensional layout system for designing web pages with rows and columns."
          },
          {
            "label": "Media Queries",
            "desc": "CSS technique used to apply styles based on device characteristics such as width, height, or orientation."
          },
          {
            "label": "Transitions",
            "desc": "CSS property that allows smooth animations between changes in properties."
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q2 Which CSS layout is best suited for a responsive navbar?",
        "code": "",
        "options": ["Position", "Float", "Flexbox", "Inline-block"],
        "correctIndex": 2
      },
      {
        "type": "heading1",
        "id": "javascript",
        "text": "Months 3–4: Programming with JavaScript (40 Days)"
      },
      {
        "type": "video",
        "title": "JavaScript Tutorial Part 1",
        "url": "https://youtu.be/sscX432bMZo?feature=shared",
        "description": "Start learning JavaScript basics including syntax, variables, data types, and functions in this detailed beginner-friendly tutorial."
      },
      {
        "type": "video",
        "title": "JavaScript Tutorial Part 2",
        "url": "https://youtu.be/_TjtAyMkiTI?feature=shared",
        "description": "Continue with DOM manipulation, events, and modern JavaScript features like ES6+."
      },
      {
        "type": "paragraph",
        "text": "JavaScript is a high-level, interpreted scripting language primarily used to make web pages interactive. It is a core technology of the World Wide Web, alongside HTML and CSS, and enables dynamic behavior on web pages. JavaScript is used both on the client-side (in the browser) and server-side (with environments like Node.js)."
      },
      {
        "type": "heading2",
        "id": "core-concepts",
        "text": "Core Concepts"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Data Types",
            "desc": "Understand primitive types like strings, numbers, booleans, null, undefined, and complex types like objects and arrays."
          },
          {
            "label": "Control Flow",
            "desc": "Use conditional statements (if, else, switch) and loops (for, while, do-while)."
          },
          {
            "label": "Functions",
            "desc": "Create reusable blocks of code using function declarations, expressions, arrow functions."
          },
          {
            "label": "Objects",
            "desc": "Store related data and functionalities in objects with properties and methods."
          },
          {
            "label": "Arrays",
            "desc": "Store ordered collections and manipulate them with methods like push, pop, map, filter."
          },
          {
            "label": "DOM Manipulation",
            "desc": "Use JavaScript to change HTML structure, style, and content dynamically."
          },
          {
            "label": "Event Handling",
            "desc": "React to user input and browser events using event listeners."
          },
          {
            "label": "ES6+ Features",
            "desc": "Explore let/const, template literals, destructuring, spread/rest, promises, async/await."
          }
        ]
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Example: Arrow Function and Async/Await\nconst fetchData = async () => {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};"
      },
      {
        "type": "paragraph",
        "text": "The Document Object Model (DOM) is a programming interface for web documents. With JavaScript, you can access and manipulate elements in the DOM, change their styles, respond to events like clicks or keypresses, and dynamically add or remove content."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// DOM Manipulation Example\ndocument.getElementById('myButton').addEventListener('click', () => {\n  document.getElementById('output').textContent = 'Button clicked!';\n});"
      },
      {
        "type": "table",
        "headers": ["Feature", "ES5", "ES6+"],
        "rows": [
          ["Variable Declaration", "var", "let, const"],
          ["Functions", "function", "arrow function (=>)"],
          ["Modules", "Not supported", "import/export"],
          ["Classes", "Function-based", "class keyword"]
        ]
      },
      {
        "type": "mcq",
        "question": "Q3 What does the `let` keyword do in JavaScript?",
        "code": "",
        "options": [
          "Declares a variable that is globally scoped",
          "Declares a constant variable",
          "Declares a block-scoped local variable",
          "Defines a function"
        ],
        "correctIndex": 2
      },
      {
        "type": "quote",
        "text": "“Any application that can be written in JavaScript, will eventually be written in JavaScript.” – Jeff Atwood"
      },
      {
        "type": "heading1",
        "id": "frontend-frameworks",
        "text": "Months 5–6: Choose and Master a Frontend Framework"
      },
      {
        "type": "paragraph",
        "text": "After building a strong foundation in HTML, CSS, and JavaScript, it's time to dive into a modern frontend framework. The goal of Months 5 and 6 is to specialize in a framework that allows you to build scalable, component-based applications. React is a great choice due to its widespread use, community support, and flexibility. However, alternatives like Vue.js or Angular can also be explored."
      },
      {
        "type": "heading2",
        "id": "react-topics",
        "text": "React (30 Days)"
      },
      {
        "type": "video",
        "title": "React Full Course – Learn React in 30 Days",
        "url": "https://youtu.be/FxgM9k1rg0Q?feature=shared",
        "description": "A complete 30-day tutorial on React, starting from the basics of components and JSX to advanced hooks and routing."
      },
      {
        "type": "paragraph",
        "text": "React is a JavaScript library developed by Facebook that simplifies the process of building interactive UIs. It allows developers to break down complex interfaces into reusable components. In the next 30 days, you will learn how to think in React, manage state effectively, and build modern single-page applications (SPAs)."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "JSX",
            "desc": "A syntax extension that lets you write HTML in JavaScript."
          },
          {
            "label": "Props",
            "desc": "Props allow components to be dynamic and reusable by passing data between them."
          },
          {
            "label": "State",
            "desc": "State lets components remember information and react to user inputs or other events."
          },
          {
            "label": "Hooks",
            "desc": "Learn essential hooks like useState, useEffect, and custom hooks to handle side effects and state logic."
          },
          {
            "label": "Event Handling",
            "desc": "Handle user interactions such as clicks, form submissions, and input changes efficiently."
          },
          {
            "label": "Forms",
            "desc": "Build controlled and uncontrolled forms using state and ref management."
          },
          {
            "label": "React Router",
            "desc": "Implement client-side routing and create multiple pages using React Router."
          }
        ]
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "function Welcome({ name }) {\n  return <h1>Hello, {name}!</h1>;\n}\n\nfunction App() {\n  return <Welcome name=\"Vaibhav\" />;\n}"
      },
      {
        "type": "paragraph",
        "text": "The code above demonstrates a simple React component with props. Understanding such patterns helps you reuse UI logic across your application efficiently."
      },
      {
        "type": "quote",
        "text": "“The future of frontend is component-driven.” – Kent C. Dodds"
      },
      {
        "type": "paragraph",
        "text": "Once you're comfortable with the basics, try building a small project such as a Todo App, Weather Dashboard, or a Blog Viewer. These projects will reinforce the core concepts and prepare you for more advanced topics like state management with Redux or context APIs, performance optimization, and deployment."
      },
      {
        "type": "paragraph",
        "text": "You are encouraged to document your journey, share your GitHub projects, and write blog posts about what you learn. This not only reinforces your understanding but also builds your developer portfolio."
      },
      {
        "type": "heading2",
        "id": "angular",
        "text": "Angular (30 Days)"
      },
      {
        "type": "video",
        "title": "Angular Full Course",
        "url": "https://youtu.be/3qBXWUpoPHo?feature=shared",
        "description": "Complete Angular tutorial covering components, services, routing, forms, and more."
      },
      {
        "type": "paragraph",
        "text": "Angular is a comprehensive frontend framework developed by Google. Unlike libraries like React, Angular is a full-fledged solution, offering everything out of the box — routing, state management, HTTP clients, and more. It uses TypeScript by default, which adds static typing and better tooling to JavaScript."
      },
      {
        "type": "paragraph",
        "text": "Angular is highly opinionated and follows a structured approach, which makes it suitable for large-scale and enterprise-grade applications. Its strong emphasis on dependency injection, modularity, and two-way data binding helps developers build scalable and maintainable apps. The Angular CLI also simplifies project setup, building, and testing."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Core Features",
            "desc": "Component-based architecture, two-way binding, reactive forms, routing, and RxJS observables."
          },
          {
            "label": "Best For",
            "desc": "Enterprise-grade apps, internal tools, or large-scale applications that benefit from structured coding practices."
          },
          {
            "label": "Learning Curve",
            "desc": "Steeper than React or Next.js due to advanced TypeScript usage and framework-specific patterns."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Focus your 30 days on building at least one end-to-end Angular project that includes routing, a form with validation, a service with HTTP requests, and component communication. Use Angular Material for UI components to speed up design."
      },
      {
        "type": "heading2",
        "id": "nextjs",
        "text": "Next.js (5 Days)"
      },
      {
        "type": "video",
        "title": "Next.js Crash Course",
        "url": "https://youtu.be/yN8VXmncvRU?feature=shared",
        "description": "Learn the basics of Next.js, server-side rendering, static site generation, routing, and APIs."
      },
      {
        "type": "paragraph",
        "text": "Next.js is a modern React framework developed by Vercel that extends the capabilities of React. It adds built-in support for server-side rendering (SSR), static site generation (SSG), and dynamic routing. These features make Next.js ideal for performance-focused and SEO-friendly web applications."
      },
      {
        "type": "paragraph",
        "text": "It’s minimal, flexible, and ideal for developers who already know React and want to take their skills to the next level. You can build anything from blogs to SaaS platforms using Next.js while enjoying features like API routes, image optimization, and file-based routing."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Core Features",
            "desc": "Server-side rendering, static generation, API routes, dynamic routing, and image optimization."
          },
          {
            "label": "Best For",
            "desc": "SEO-friendly blogs, landing pages, marketing websites, and modern full-stack apps with built-in backend routes."
          },
          {
            "label": "Learning Curve",
            "desc": "Easier for developers familiar with React; straightforward routing and SSR/SSG are the main focus."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "In just 5 days, you can build a portfolio site, blog, or product landing page using Next.js. Focus on SSR, dynamic routes, and API integration. Use Vercel to deploy your app for free with one-click deployment."
      },
      {
        "type": "quote",
        "text": "Tip: If time allows, try learning two frameworks for broader exposure."
      },
      {
        "type": "paragraph",
        "text": "Mastering both Angular and Next.js will not only diversify your frontend skills but also prepare you for interviews and projects where specific framework expertise is required. Angular suits teams and large projects, while Next.js is ideal for rapid development and modern web applications."
      },
      {
        "type": "heading1",
        "id": "backend-development",
        "text": "Months 7–8: Backend Development and API Building"
      },
      {
        "type": "paragraph",
        "text": "In these two months, your focus shifts from frontend interfaces to the backbone of any application—the backend. Backend development is crucial because it handles data management, authentication, server-side logic, and communication between the database and client-facing interfaces. Whether you're building a web application, a mobile app, or a RESTful API, backend skills make your applications robust, scalable, and secure."
      },
      {
        "type": "heading2",
        "id": "node-express",
        "text": "Node.js and Express.js (30 Days)"
      },
      {
        "type": "video",
        "title": "Node.js + Express.js Full Course",
        "url": "https://youtu.be/sscX432bMZo?feature=shared",
        "description": "This tutorial will guide you through building a complete RESTful API with Node.js and Express."
      },
      {
        "type": "paragraph",
        "text": "Node.js is a powerful runtime that lets you run JavaScript on the server. When combined with Express.js, a minimal and flexible Node.js framework, you can build powerful APIs with routing, middleware, and authentication. Node and Express are commonly used in the MERN stack (MongoDB, Express, React, Node) and are widely adopted in the industry."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Routing",
            "desc": "Define endpoints for various HTTP methods like GET, POST, PUT, and DELETE."
          },
          {
            "label": "Middleware",
            "desc": "Functions that handle request and response cycles such as logging, parsing, authentication."
          },
          {
            "label": "Database Integration",
            "desc": "Use MongoDB or PostgreSQL to store and retrieve data dynamically."
          },
          {
            "label": "Authentication",
            "desc": "Implement secure login systems using JWT (JSON Web Tokens) or session-based authentication."
          },
          {
            "label": "Environment Variables",
            "desc": "Manage secrets using dotenv to protect API keys and database credentials."
          }
        ]
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Sample Express Route\napp.post('/api/register', async (req, res) => {\n  const { name, email, password } = req.body;\n  const user = await User.create({ name, email, password });\n  res.status(201).json(user);\n});"
      },
      {
        "type": "quote",
        "text": "With Node.js and Express.js, JavaScript becomes truly full-stack, powering both frontend and backend."
      },
      {
        "type": "heading2",
        "id": "django",
        "text": "Django (5 Days)"
      },
      {
        "type": "video",
        "title": "Django Full Course for Beginners",
        "url": "https://youtu.be/opzK3E4Xx6o?feature=shared",
        "description": "Get started with Django and build your first project using Python and its powerful tools."
      },
      {
        "type": "paragraph",
        "text": "Django is a high-level Python framework known for its clean syntax, rapid development, and built-in features like admin dashboards and authentication. If you're already comfortable with Python, Django can be a great choice. It's widely used in startups, research-based applications, and large-scale services like Instagram."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "ORM (Object-Relational Mapper)",
            "desc": "Write Python code to interact with SQL databases instead of raw SQL queries."
          },
          {
            "label": "Admin Panel",
            "desc": "Out-of-the-box admin dashboard to manage database records with ease."
          },
          {
            "label": "Built-in Authentication",
            "desc": "Easily handle user registration, login, logout, and session management."
          },
          {
            "label": "URL Routing",
            "desc": "Use Pythonic paths to map views to URLs efficiently."
          },
          {
            "label": "Security",
            "desc": "Comes with features like CSRF protection, password hashing, and more."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "# Sample Django view\nfrom django.http import JsonResponse\n\ndef welcome_view(request):\n    return JsonResponse({\"message\": \"Welcome to Django API\"})"
      },
      {
        "type": "quote",
        "text": "Django’s philosophy: 'Don’t repeat yourself.' Everything is optimized for rapid, clean development."
      },
      {
        "type": "heading2",
        "id": "which-to-choose",
        "text": "Which Should You Choose: Node or Django?"
      },
      {
        "type": "paragraph",
        "text": "Your choice depends on your primary language preference and the ecosystem you're most comfortable in. If you enjoy JavaScript and are interested in the MERN stack, Node.js with Express is your best bet. However, if you love Python and want a rapid development experience with batteries included, Django will serve you well."
      },
      {
        "type": "table",
        "headers": ["Feature", "Node.js + Express", "Django"],
        "rows": [
          ["Language", "JavaScript", "Python"],
          [
            "Database Integration",
            "MongoDB / SQL",
            "SQL (PostgreSQL, SQLite, etc.)"
          ],
          [
            "Speed to Prototype",
            "Moderate",
            "Very Fast (admin panel built-in)"
          ],
          ["Community & Ecosystem", "Vast (JS world)", "Mature & Pythonic"],
          [
            "Built-in Features",
            "Minimal, requires packages",
            "Rich set of tools out-of-the-box"
          ]
        ]
      },
      {
        "type": "heading1",
        "id": "month-9-databases-and-data-persistence",
        "text": "Month 9: Databases and Data Persistence"
      },
      {
        "type": "paragraph",
        "text": "In this month, you'll dive into the world of databases, which are foundational to almost every modern application. You’ll learn how to design, query, and manage both structured (SQL) and unstructured (NoSQL) databases. Understanding these systems will enable you to build data-driven applications that persist user data, analytics, logs, and more."
      },
      {
        "type": "heading2",
        "id": "sql-5-days",
        "text": "SQL (5 Days)"
      },
      {
        "type": "video",
        "title": "SQL Full Course - Learn SQL in 5 Hours",
        "url": "https://youtu.be/D_wNQR3LeeM?feature=shared",
        "description": "Master the basics of SQL, including table creation, data insertion, querying with SELECT, and JOIN operations."
      },
      {
        "type": "paragraph",
        "text": "SQL (Structured Query Language) is the standard language used to interact with relational databases like MySQL, PostgreSQL, and SQLite. These databases store data in tables with fixed schemas. SQL is known for its robustness and is widely used in enterprise applications."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Schema Design",
            "desc": "Plan and structure relational tables with appropriate data types and constraints."
          },
          {
            "label": "Data Manipulation",
            "desc": "Use INSERT, UPDATE, DELETE to manage your data."
          },
          {
            "label": "Querying",
            "desc": "Fetch and filter data using SELECT, WHERE, ORDER BY, GROUP BY, and JOINs."
          },
          {
            "label": "Constraints",
            "desc": "Understand the use of PRIMARY KEY, FOREIGN KEY, NOT NULL, and UNIQUE constraints."
          },
          {
            "label": "Indexing",
            "desc": "Improve performance using indexes on columns used in WHERE or JOIN."
          }
        ]
      },
      {
        "type": "code",
        "language": "sql",
        "code": "CREATE TABLE users (\n  id INT PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100) UNIQUE,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nSELECT name, email FROM users WHERE name LIKE 'A%';"
      },
      {
        "type": "mcq",
        "question": "Q4 Which SQL command is used to remove duplicate rows from the result set?",
        "options": [
          "REMOVE DUPLICATES",
          "DISTINCT",
          "UNIQUE",
          "DELETE DUPLICATES"
        ],
        "correctIndex": 1
      },
      {
        "type": "quote",
        "text": "“The relational model of data provides users with the ability to ask sophisticated questions from data using simple language.” – Edgar F. Codd"
      },
      {
        "type": "heading2",
        "id": "mongodb-5-days",
        "text": "MongoDB (5 Days)"
      },
      {
        "type": "video",
        "title": "MongoDB Full Course - Learn MongoDB in 4 Hours",
        "url": "https://youtu.be/J6mDkcqU_ZE?feature=shared",
        "description": "Learn how to work with MongoDB, a popular NoSQL database. This includes working with documents, CRUD operations, and cloud deployment."
      },
      {
        "type": "paragraph",
        "text": "MongoDB is a document-oriented NoSQL database that stores data in flexible, JSON-like documents. It's ideal for projects with evolving requirements, unstructured data, or hierarchical data structures. MongoDB allows for rapid development and scales easily across distributed systems."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Document Model",
            "desc": "Data is stored in BSON documents—binary JSON format."
          },
          {
            "label": "CRUD Operations",
            "desc": "Perform Create, Read, Update, and Delete operations on documents."
          },
          {
            "label": "Schema-less Design",
            "desc": "Each document in a collection can have a different structure, making schema migration easier."
          },
          {
            "label": "MongoDB Atlas",
            "desc": "Cloud-hosted MongoDB as a Service platform for scaling and deployment."
          },
          {
            "label": "Indexes and Aggregation",
            "desc": "Use indexes for fast queries and the aggregation pipeline for complex analytics."
          }
        ]
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "// Insert a new user\ndb.users.insertOne({\n  name: \"Alice\",\n  email: \"alice@example.com\",\n  created_at: new Date()\n});\n\n// Find users with name starting with A\ndb.users.find({ name: { $regex: '^A' } });"
      },
      {
        "type": "mcq",
        "question": "Q5 What is the default primary key field in every MongoDB document?",
        "options": ["id", "_id", "docId", "mongoId"],
        "correctIndex": 1
      },
      {
        "type": "paragraph",
        "text": "MongoDB is widely used in modern web applications, especially in MERN and MEAN stacks. Its ability to handle large volumes of dynamic data without rigid schema requirements makes it attractive for startups and scalable applications."
      },
      {
        "type": "table",
        "headers": ["Feature", "SQL", "MongoDB"],
        "rows": [
          ["Data Model", "Tables with rows and columns", "JSON-like documents"],
          ["Schema", "Fixed", "Flexible"],
          [
            "Best Use Case",
            "Structured, transactional data",
            "Evolving, hierarchical, or unstructured data"
          ],
          ["Language", "SQL", "JavaScript-like query syntax"],
          ["Joins", "Supported", "Limited with `$lookup`"]
        ]
      },
      {
        "type": "heading1",
        "id": "devops-overview",
        "text": "Month 10: DevOps Basics – Docker and CI/CD Pipelines"
      },
      {
        "type": "paragraph",
        "text": "In modern development workflows, writing efficient code is just the beginning. The ability to deploy, scale, and maintain applications reliably is equally crucial. DevOps bridges the gap between development and operations, allowing teams to ship faster, safer, and more collaboratively. This month, we dive into the foundational concepts of DevOps with a special focus on Docker and Continuous Integration/Continuous Deployment (CI/CD)."
      },
      {
        "type": "heading2",
        "id": "why-devops",
        "text": "Why DevOps Matters"
      },
      {
        "type": "paragraph",
        "text": "DevOps is not a tool—it’s a culture shift. It aims to break down silos between software development and IT operations. Traditional software release cycles were long and manual. DevOps automates and shortens these cycles using tools and best practices, enhancing collaboration, integration, and delivery."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Faster Releases",
            "desc": "CI/CD pipelines allow code to be automatically tested and deployed, reducing time to production."
          },
          {
            "label": "Higher Quality Code",
            "desc": "Frequent testing and integration catch bugs early."
          },
          {
            "label": "More Reliability",
            "desc": "Infrastructure as code and containerization standardize environments, reducing unexpected issues."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "docker-intro",
        "text": "Introduction to Docker"
      },
      {
        "type": "paragraph",
        "text": "Docker is a platform for building, running, and shipping applications in lightweight containers. It solves the classic \"it works on my machine\" problem by bundling the application and its dependencies into a single container image that runs identically in development, staging, and production."
      },
      {
        "type": "video",
        "title": "Docker Tutorial",
        "url": "https://youtu.be/OhnTMWmfTBE?feature=shared",
        "description": "A beginner-friendly guide to Docker. Learn how to install Docker, write Dockerfiles, and use Docker Compose."
      },
      {
        "type": "heading2",
        "id": "dockerfile-basics",
        "text": "Writing Your First Dockerfile"
      },
      {
        "type": "paragraph",
        "text": "A `Dockerfile` is a script that contains instructions to build a Docker image. It typically starts from a base image (like Node.js, Python, or Ubuntu), installs dependencies, copies your source code, and defines a default command to run the app."
      },
      {
        "type": "code",
        "language": "dockerfile",
        "code": "FROM node:18-alpine\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"npm\", \"start\"]"
      },
      {
        "type": "paragraph",
        "text": "This Dockerfile sets up a basic Node.js application. You can build this image using `docker build -t myapp .` and run it with `docker run -p 3000:3000 myapp`."
      },
      {
        "type": "heading2",
        "id": "docker-compose",
        "text": "Managing Multi-Container Apps with Docker Compose"
      },
      {
        "type": "paragraph",
        "text": "Many applications require more than one service—like a backend, frontend, and database. Docker Compose simplifies managing multiple containers with a single YAML configuration file."
      },
      {
        "type": "code",
        "language": "yaml",
        "code": "version: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"3000:3000\"\n  db:\n    image: mongo\n    ports:\n      - \"27017:27017\""
      },
      {
        "type": "paragraph",
        "text": "This file defines two services: `web` (built from your local Dockerfile) and `db` (using the official MongoDB image). Run `docker-compose up` to launch both."
      },
      {
        "type": "heading2",
        "id": "ci-cd-basics",
        "text": "What is CI/CD?"
      },
      {
        "type": "paragraph",
        "text": "CI/CD is a pipeline of automated steps that start when you push code and end with deployment. It includes Continuous Integration (automatically building and testing code) and Continuous Deployment (automatically releasing working builds to production)."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Continuous Integration (CI)",
            "desc": "Merge code frequently and automatically run tests to catch issues early."
          },
          {
            "label": "Continuous Delivery (CD)",
            "desc": "Automatically prepare code for release (manual approval step optional)."
          },
          {
            "label": "Continuous Deployment",
            "desc": "Automatically deploy every passing build to production without human intervention."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "ci-cd-example",
        "text": "CI/CD Workflow with GitHub Actions"
      },
      {
        "type": "paragraph",
        "text": "GitHub Actions allows you to define workflows directly inside your repository. A typical Node.js workflow might install dependencies, run tests, and build your Docker image."
      },
      {
        "type": "code",
        "language": "yaml",
        "code": "name: Node CI\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '18'\n    - run: npm install\n    - run: npm test"
      },
      {
        "type": "paragraph",
        "text": "This configuration runs every time code is pushed. You can extend it to build Docker images, push them to Docker Hub, and deploy to a platform like Render or Railway."
      },
      {
        "type": "heading1",
        "id": "months-11-12",
        "text": "Months 11–12: Projects, Practice, and Internships"
      },
      {
        "type": "paragraph",
        "text": "The final two months of your full stack journey are not just about wrapping things up—they are about transformation. You shift from being a learner to a creator, from consuming tutorials to delivering real-world applications. This is your opportunity to refine your skills, build meaningful projects, and step confidently into the job market or freelance world."
      },
      {
        "type": "heading2",
        "id": "project-development",
        "text": "Project Development and Revision"
      },
      {
        "type": "paragraph",
        "text": "By now, you’ve built smaller apps and followed along with tutorials. It’s time to level up by creating 2–3 production-grade full stack applications. Focus on real-world utility, clean architecture, and deployment. These projects will be the crown jewels of your portfolio and talking points in interviews."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Frontend",
            "desc": "Use React, Next.js, or Angular to build modern, responsive, and user-friendly interfaces. Pay attention to UI/UX design and component reusability."
          },
          {
            "label": "Backend",
            "desc": "Build robust RESTful or GraphQL APIs using Express.js (Node.js) or Django (Python). Implement proper routing, error handling, and middleware."
          },
          {
            "label": "Database",
            "desc": "Integrate MongoDB for flexible NoSQL schemas or SQL databases like PostgreSQL/MySQL for relational data models."
          },
          {
            "label": "Authentication",
            "desc": "Add JWT-based authentication, role-based access control (admin/user), and secure password handling (bcrypt)."
          },
          {
            "label": "Deployment",
            "desc": "Deploy frontend on Vercel or Netlify, and backend APIs on Render or Railway. Add custom domains and environment variables."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "project-ideas",
        "text": "Project Ideas to Inspire You"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Social Media Dashboard",
            "desc": "Track analytics and engagement for various platforms using interactive charts, authentication, and real-time updates."
          },
          {
            "label": "Online Marketplace",
            "desc": "Build an e-commerce platform with product listings, user roles, order tracking, payment gateway integration, and admin controls."
          },
          {
            "label": "Blog CMS",
            "desc": "Create a content management system with markdown support, rich text editing, tagging, and versioning of posts."
          },
          {
            "label": "Portfolio with Admin Panel",
            "desc": "Develop a personal portfolio site with a hidden admin panel to update content, track visitor metrics, and receive contact form messages."
          },
          {
            "label": "Real-Time Chat App",
            "desc": "Use WebSocket or Socket.io to build a secure chat app with typing indicators, room support, and persistent chat history."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "practice-ideas",
        "text": "Practice and Exposure"
      },
      {
        "type": "paragraph",
        "text": "Practical experience is crucial. It reinforces concepts and helps you grow as a developer. Here are smart ways to stay engaged and relevant:"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Apply for Internships",
            "desc": "Look for paid or unpaid internships through LinkedIn, Internshala, and AngelList. Even remote roles can give you great exposure."
          },
          {
            "label": "Freelance Platforms",
            "desc": "Create profiles on Fiverr, Upwork, or Toptal. Start with small projects—portfolios and reviews matter more than price early on."
          },
          {
            "label": "Open-Source Contributions",
            "desc": "Contribute to GitHub projects. Fix bugs, write documentation, or improve UI. It’s a great way to learn collaboration and version control."
          },
          {
            "label": "Hackathons",
            "desc": "Participate in local or global hackathons on platforms like Devpost or Hackerearth. You’ll learn rapidly and often build innovative solutions under pressure."
          },
          {
            "label": "Write Technical Blogs",
            "desc": "Document your journey, project walkthroughs, and lessons learned on Hashnode, Dev.to, or Medium. It builds credibility and solidifies your understanding."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "final-tips",
        "text": "Final Thoughts"
      },
      {
        "type": "paragraph",
        "text": "The last stretch of this 12-month roadmap is not the end—it’s a beginning. You’re now equipped with both depth and breadth across the full stack landscape. Whether you aim for a job, internship, freelance career, or your own startup, you have the foundation."
      },
      {
        "type": "quote",
        "text": "“Learning never exhausts the mind, but the act of doing ignites mastery.”"
      },
      {
        "type": "heading2",
        "id": "key-takeaways",
        "text": "Key Takeaways"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Consistency",
            "desc": "Stick to your weekly goals. Even small progress adds up over time."
          },
          {
            "label": "Build, Don’t Just Watch",
            "desc": "Tutorials are helpful, but real understanding comes from creating."
          },
          {
            "label": "Explore Breadth and Depth",
            "desc": "Become familiar with multiple tools, then go deep in your preferred stack."
          },
          {
            "label": "Document Your Work",
            "desc": "Maintain a GitHub repo, write blogs, and share your journey on LinkedIn to build visibility."
          },
          {
            "label": "Keep Learning",
            "desc": "Tech evolves quickly. Always stay curious, and keep sharpening your skills."
          }
        ]
      }
    ]
  },
  {
    "slug": "full-stack-dev-6-months",
    "title": "Full Stack Dev - 6 Month Roadmap",
    "time": "6 months",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737822877/intermediate_fullstack.docx",
    "description": "Intermediate-level full stack development guide covering key concepts and tools.",
    "keywords": [
      "full stack",
      "intermediate dev",
      "mern",
      "backend",
      "frontend"
    ],
    "sections": [
      {
        "type": "heading1",
        "text": "Month 1: Development Environment and Frontend Fundamentals",
        "id": "month-1-dev-environment"
      },
      {
        "type": "paragraph",
        "text": "Month 1 is all about setting up your development environment and mastering the foundational frontend technologies. You’ll begin with tools like Git for version control and Visual Studio Code (VS Code) for efficient code writing. Then, you’ll move into HTML and CSS, the backbone of all web interfaces. By the end of this month, you'll be able to create clean, responsive web pages and manage your codebase like a professional."
      },
      {
        "type": "heading2",
        "text": "Git and VS Code",
        "id": "git-vscode"
      },
      {
        "type": "video",
        "title": "Git and VS Code Tutorial",
        "url": "https://youtu.be/uaeKhfhYE0U?feature=shared",
        "description": "This tutorial will help you get started with Git and VS Code. Learn how to set up version control, initialize repositories, commit changes, and push to GitHub. You’ll also configure VS Code with extensions and settings that enhance productivity."
      },
      {
        "type": "paragraph",
        "text": "Version control is one of the most critical practices in modern software development. Git is a distributed version control system that allows developers to track changes, collaborate on codebases, and manage features efficiently. Whether you're working solo or in a team, understanding Git is essential for maintaining clean and organized code history."
      },
      {
        "type": "paragraph",
        "text": "Start by installing Git on your system and configuring your global username and email. Once set up, you can initialize a new repository using `git init`, track files with `git add`, and commit changes using `git commit`. You can also link your local repository to a remote one like GitHub using `git remote add origin` followed by a `git push` to sync your work online."
      },
      {
        "type": "code",
        "language": "bash",
        "code": "git init\n git add .\n git commit -m \"Initial commit\"\n git remote add origin <repo-url>\n git push -u origin main"
      },
      {
        "type": "paragraph",
        "text": "As your project grows, Git’s branching feature becomes vital. Branching allows you to experiment with new features in isolation before merging them into the main codebase. This prevents unstable code from disrupting production."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Git Basics",
            "desc": "Initialize repositories, stage files, commit changes, and push to GitHub."
          },
          {
            "label": "Branching",
            "desc": "Create branches to manage new features, fixes, or experiments. Use `git merge` and `git rebase` to combine work effectively."
          },
          {
            "label": "Commit History",
            "desc": "Use `git log` to view commit history and `git diff` to inspect changes before staging."
          },
          {
            "label": "Conflict Resolution",
            "desc": "Understand merge conflicts and how to resolve them using diff tools or manually."
          }
        ]
      },
      {
        "type": "heading2",
        "text": "VS Code Setup and Best Practices",
        "id": "vscode-setup"
      },
      {
        "type": "paragraph",
        "text": "Visual Studio Code (VS Code) is a highly customizable code editor that enhances productivity through its rich extension ecosystem and built-in terminal. Start by installing extensions like Prettier (for code formatting), ESLint (for linting JavaScript), GitLens (for advanced Git insights), and Live Server (for previewing HTML in real-time)."
      },
      {
        "type": "paragraph",
        "text": "Additionally, get comfortable with keyboard shortcuts like `Ctrl + P` for quick file access, `Ctrl + Shift + F` for global search, and `Ctrl + ~` to open the terminal. You can also customize themes and settings via the settings.json file to align with your workflow."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Live Server",
            "desc": "Use to preview changes to HTML/CSS instantly in the browser."
          },
          {
            "label": "Prettier",
            "desc": "Automatically format your code consistently across files."
          },
          {
            "label": "GitLens",
            "desc": "View Git history, authorship, and inline blame directly inside VS Code."
          }
        ]
      },
      {
        "type": "quote",
        "text": "Mastering Git and configuring VS Code effectively will save you countless hours throughout your development career."
      },
      {
        "type": "heading2",
        "text": "HTML (5 Days)",
        "id": "html"
      },
      {
        "type": "video",
        "title": "HTML Full Course",
        "url": "https://youtu.be/BsDoLVMnmZs?feature=shared",
        "description": "This comprehensive video teaches the building blocks of web content. HTML is the structure that defines how web elements are arranged. Learn about tags, semantic HTML, forms, tables, accessibility, and page layouts."
      },
      {
        "type": "paragraph",
        "text": "HTML (HyperText Markup Language) is the foundation of every website you see on the internet. It defines the structure and layout of a webpage using a system of tags and attributes. Whether it's a simple blog or a complex web application, HTML is where it all starts. Learning HTML helps you understand how browsers read and render content, enabling you to create organized, accessible, and scalable web pages."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Document Structure",
            "desc": "Understand the role of <html>, <head>, and <body> elements in defining the layout of a page."
          },
          {
            "label": "headings & Paragraphs",
            "desc": "Use heading tags (h1–h6) for titles and <p> for text content to create a readable page."
          },
          {
            "label": "Links and Images",
            "desc": "Incorporate navigation and media using <a> tags for links and <img> for images."
          },
          {
            "label": "Lists",
            "desc": "Create ordered (<ol>) and unordered (<ul>) lists to organize items clearly."
          },
          {
            "label": "Tables",
            "desc": "Use <table>, <tr>, <td>, and <th> to display structured tabular data."
          },
          {
            "label": "Forms",
            "desc": "Capture user input using <form>, <input>, <label>, <textarea>, and <button>."
          },
          {
            "label": "Semantic Tags",
            "desc": "Leverage <article>, <section>, <nav>, and <footer> to create accessible layouts."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Semantic HTML is a crucial concept in modern web development. It improves code readability for both developers and screen readers. Tags like <header>, <main>, <aside>, and <footer> help segment the page meaningfully. This also supports SEO and accessibility, which are vital for professional-grade applications."
      },
      {
        "type": "paragraph",
        "text": "Another key aspect of HTML is its ability to work seamlessly with CSS and JavaScript. By assigning classes and IDs to elements, you create hooks for styling and interactivity. HTML acts as the backbone, while CSS and JS build on top of it to deliver modern web experiences."
      },
      {
        "type": "code",
        "language": "html",
        "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>My First Page</title>\n  </head>\n  <body>\n    <h1>Hello World!</h1>\n    <p>This is a paragraph in HTML.</p>\n  </body>\n</html>"
      },
      {
        "type": "paragraph",
        "text": "Once you're comfortable with basic tags, start creating multi-page sites using internal linking via anchor tags. Learn how to use target attributes to open links in new tabs and improve the overall user experience. Consider exploring best practices like proper indentation, writing clean code, and commenting for better maintenance."
      },
      {
        "type": "mcq",
        "question": "Q1 Which HTML tag is used to create a hyperlink?",
        "code": "",
        "options": ["<img>", "<a>", "<link>", "<href>"],
        "correctIndex": 1
      },
      {
        "type": "paragraph",
        "text": "By the end of these 5 days, you should be able to build structured, readable, and semantically correct static pages. This includes forms for user input, tables for displaying data, and navigational links for page transitions. HTML will continue to be a critical skill as you move into CSS and JavaScript next."
      },
      {
        "type": "heading2",
        "text": "CSS (20 Days)",
        "id": "css"
      },
      {
        "type": "video",
        "title": "CSS Full Course",
        "url": "https://youtu.be/dSJM4Gyh8jE?feature=shared",
        "description": "Learn how to transform plain HTML into visually appealing, responsive webpages. This video covers everything from selectors and positioning to animations and flexbox/grid systems."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Selectors & Properties",
            "desc": "Style elements using class selectors, ID selectors, pseudo-classes, and pseudo-elements."
          },
          {
            "label": "Box Model",
            "desc": "Understand how content, padding, borders, and margins interact to define layout."
          },
          {
            "label": "Positioning",
            "desc": "Use static, relative, absolute, and fixed positions to control element flow."
          },
          {
            "label": "Flexbox & Grid",
            "desc": "Master layout systems for creating responsive, flexible designs with minimal code."
          },
          {
            "label": "Media Queries",
            "desc": "Adapt styles for various screen sizes and breakpoints to achieve mobile responsiveness."
          },
          {
            "label": "Animations",
            "desc": "Add smooth transitions and animations to elements using keyframes and CSS properties."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "CSS (Cascading Style Sheets) is a core technology for styling and laying out web pages. It controls everything from fonts, colors, spacing, and alignment to responsive behavior, animations, and user interaction. Whether you're building static sites or dynamic apps, mastering CSS is essential for professional frontend development."
      },
      {
        "type": "paragraph",
        "text": "You'll begin your CSS journey by learning the syntax and structure: selectors, properties, and values. Understanding how the cascade and specificity work will allow you to manage styles efficiently across large applications. For example, using class selectors is preferable to inline styles or IDs for maintainability."
      },
      {
        "type": "paragraph",
        "text": "The box model is a fundamental concept in CSS. Every element on a webpage is a rectangular box, and controlling the spacing between these boxes is key to professional layout design. You’ll learn how padding, borders, and margins influence spacing, and how to use `box-sizing: border-box` for predictable layouts."
      },
      {
        "type": "code",
        "language": "css",
        "code": "div {\n  padding: 10px;\n  border: 1px solid #ccc;\n  margin: 20px;\n  box-sizing: border-box;\n}"
      },
      {
        "type": "paragraph",
        "text": "After mastering the basics, you'll move into modern layout systems. Flexbox allows you to align and distribute space among items in a container, making it perfect for navbars, cards, and responsive grids. CSS Grid, on the other hand, gives you two-dimensional layout control and is ideal for entire page structures."
      },
      {
        "type": "paragraph",
        "text": "Responsive design is critical in a world of mobile-first browsing. You'll use media queries to adjust layout and styling based on screen size and orientation. This ensures your site looks great on desktops, tablets, and smartphones."
      },
      {
        "type": "paragraph",
        "text": "Finally, you'll dive into CSS transitions and animations. Transitions allow smooth changes to occur (like hover effects), while keyframes let you create full-blown animations. These effects enhance the user experience when used thoughtfully."
      },
      {
        "type": "code",
        "language": "css",
        "code": "button {\n  background-color: #008cba;\n  transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n  background-color: #005f5f;\n}"
      },
      {
        "type": "paragraph",
        "text": "By the end of these 20 days, you will have built several styled components such as navigation bars, cards, landing pages, and form layouts. You’ll understand how to structure a responsive site and apply animations for improved interactivity. CSS may seem overwhelming at first, but with daily practice, you’ll develop a strong intuition for writing clean, scalable stylesheets."
      },
      {
        "type": "heading1",
        "text": "Month 2–3: Programming Logic and Dynamic Interfaces",
        "id": "javascript-foundations"
      },
      {
        "type": "paragraph",
        "text": "After building basic layouts with HTML and CSS, it's time to bring interactivity and logic into your websites using JavaScript. This stage will turn your static pages into dynamic, user-friendly interfaces. JavaScript is the programming language of the web, and it powers everything from simple animations to complex web applications like Gmail or Facebook."
      },{
        "type": "heading2",
        "text": "JavaScript (50 Days)",
        "id" : "javascript-basics"
      },
      {
        "type": "video",
        "title": "JavaScript Fundamentals Part 1",
        "url": "https://youtu.be/sscX432bMZo?feature=shared",
        "description": "Learn the foundations of JavaScript including syntax, variables, and basic programming constructs."
      },
      {
        "type": "video",
        "title": "JavaScript Advanced Topics Part 2",
        "url": "https://youtu.be/_TjtAyMkiTI?feature=shared",
        "description": "Dive deeper into JavaScript with ES6 features, asynchronous programming, and more."
      },
      {
        "type": "paragraph",
        "text": "Over the next 40 days, you'll progress from beginner to intermediate JavaScript developer. You'll explore topics such as control flow (if/else, switch), loops (for, while), functions (declarations, expressions, arrow functions), and the Document Object Model (DOM) which allows you to interact with HTML elements using code."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Variables",
            "desc": "Learn about var, let, and const to store and manage data."
          },
          {
            "label": "Functions",
            "desc": "Understand how to write reusable blocks of logic."
          },
          {
            "label": "Conditionals",
            "desc": "Use if-else and switch statements for logic branching."
          },
          {
            "label": "Loops",
            "desc": "Automate repetitive tasks using for, while, and forEach."
          },
          {
            "label": "Arrays and Objects",
            "desc": "Work with collections of data and key-value pairs."
          },
          {
            "label": "DOM Manipulation",
            "desc": "Access and modify webpage elements dynamically."
          },
          {
            "label": "ES6 Features",
            "desc": "Use modern syntax like arrow functions, destructuring, and template literals."
          },
          {
            "label": "Async Programming",
            "desc": "Handle tasks like API requests with promises and async/await."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "In addition to theory, you will build small projects to reinforce your knowledge. For example, a to-do list app will teach you how to manipulate the DOM, handle events like button clicks, and store data in local storage. A quote generator will help you understand how to use arrays and update the interface in real time."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const button = document.querySelector('#generate');\nbutton.addEventListener('click', () => {\n  const quotes = [\n    'Believe in yourself!',\n    'Push your limits.',\n    'Never stop learning.'\n  ];\n  const randomIndex = Math.floor(Math.random() * quotes.length);\n  document.querySelector('#quote').textContent = quotes[randomIndex];\n});"
      },
      {
        "type": "paragraph",
        "text": "This example selects a button from the DOM and updates a quote on the page each time it's clicked. It demonstrates the core principles of event listeners, array operations, and DOM updates—skills that are vital for any web developer."
      },
      {
        "type": "mcq",
        "question": "Q2 What does the following code output?\n\nconsole.log(typeof null);",
        "code": "",
        "options": ["'null'", "'undefined'", "'object'", "'string'"],
        "correctIndex": 2
      },
      {
        "type": "paragraph",
        "text": "By the end of Month 3, you should be comfortable reading and writing JavaScript code, debugging issues using browser tools, and building interactive applications. This will prepare you for modern frontend frameworks like React, which you'll learn next."
      },
      {
        "type": "heading1",
        "text": "Month 4: Master a Frontend Framework",
        "id": "frontend-framework"
      },
      {
        "type": "paragraph",
        "text": "With JavaScript fundamentals now in place, it’s time to step into the world of real-world web applications. Modern frontend frameworks help you build powerful, maintainable, and responsive web interfaces. In this phase, you’ll choose one framework from React, Angular, or Next.js depending on your personal preference and career goals. Each of these tools has its own strengths, and mastering any of them will take your frontend skills to a professional level."
      },
      {
        "type": "paragraph",
        "text": "You will start by understanding core concepts like components, routing, and state management. Then, you’ll progress to building actual projects using the framework of your choice. The aim is to go beyond just tutorials and move into real development experience."
      },
      {
        "type": "heading2",
        "text": "React (30 Days)",
        "id": "react-framework"
      },
      {
        "type": "video",
        "title": "React Tutorial",
        "url": "https://youtu.be/FxgM9k1rg0Q?feature=shared",
        "description": "A complete beginner's guide to React for building dynamic web interfaces."
      },
      {
        "type": "paragraph",
        "text": "React is a library built by Facebook that focuses on building reusable UI components. With its component-driven architecture, React allows developers to create encapsulated components that manage their own state, then compose them to make complex UIs. The use of JSX allows HTML to be written in JavaScript, which improves code readability and reusability."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "JSX",
            "desc": "Learn how to write markup directly in JavaScript."
          },
          {
            "label": "Components",
            "desc": "Understand the building blocks of React applications."
          },
          {
            "label": "Props and State",
            "desc": "Manage data within and between components."
          },
          {
            "label": "Hooks",
            "desc": "Use useState, useEffect and custom hooks to manage lifecycle and logic."
          },
          {
            "label": "Routing",
            "desc": "Navigate between pages using React Router."
          },
          {
            "label": "State Management",
            "desc": "Learn context API or integrate Redux for global state."
          }
        ]
      },
      {
        "type": "heading2",
        "text": "Angular (30 Days)",
        "id": "angular-framework"
      },
      {
        "type": "video",
        "title": "Angular Full Course",
        "url": "https://youtu.be/3qBXWUpoPHo?feature=shared",
        "description": "Comprehensive Angular course covering components, services, routing, forms, and more."
      },
      {
        "type": "paragraph",
        "text": "Angular, developed by Google, is a complete framework for building large-scale applications. Unlike React, Angular comes with everything out of the box — from routing to state management. It’s built with TypeScript, which helps catch bugs during development and improves code quality."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Components and Modules",
            "desc": "Understand how Angular organizes and builds applications."
          },
          {
            "label": "Services and Dependency Injection",
            "desc": "Create shared logic and manage reusable code."
          },
          {
            "label": "Routing",
            "desc": "Enable navigation across multiple views."
          },
          {
            "label": "Forms and Validation",
            "desc": "Handle user input and validation seamlessly."
          },
          {
            "label": "RxJS",
            "desc": "Utilize observables to manage asynchronous data streams."
          }
        ]
      },
      {
        "type": "heading2",
        "text": "Next.js (5 Days)",
        "id": "nextjs-framework"
      },
      {
        "type": "video",
        "title": "Next.js Beginner Tutorial",
        "url": "https://youtu.be/yN8VXmncvRU?feature=shared",
        "description": "A beginner-friendly tutorial to help you start building applications with Next.js."
      },
      {
        "type": "paragraph",
        "text": "Next.js is a React-based framework that provides server-side rendering and static site generation out of the box. It simplifies the deployment process and greatly improves performance and SEO. Next.js is ideal if you want to go beyond single-page apps and build fast, scalable full-stack web apps."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "File-based Routing",
            "desc": "Automatically create routes using the file system."
          },
          {
            "label": "Server-side Rendering (SSR)",
            "desc": "Improve SEO and initial page load speed."
          },
          {
            "label": "API Routes",
            "desc": "Build backend endpoints within the same project."
          },
          {
            "label": "Deployment",
            "desc": "Deploy apps using Vercel and optimize performance."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Whichever framework you choose, the most important part is to build. Work on real-world projects — whether it’s a dashboard, portfolio, or a small product. Focus on understanding the underlying architecture and best practices."
      },
      {
        "type": "heading1",
        "id": "backend-databases",
        "text": "Month 5: Backend and Databases"
      },
      {
        "type": "paragraph",
        "text": "Now that your frontend skills are in place, it's time to focus on the backend—where your application's core logic lives. In this phase, you'll learn how to create APIs, manage databases, and integrate authentication. This month focuses on using Node.js with Express or Django and working with both SQL and NoSQL databases."
      },
      {
        "type": "heading2",
        "id": "node-express",
        "text": "Node.js and Express.js (30 Days)"
      },
      {
        "type": "video",
        "title": "Node.js & Express Full Course",
        "url": "https://youtu.be/sscX432bMZo?feature=shared",
        "description": "Learn backend web development using JavaScript. Covers RESTful API development, routing, middleware, JWT authentication, and MongoDB integration."
      },
      {
        "type": "paragraph",
        "text": "Node.js is a runtime environment that allows developers to run JavaScript on the server side. Combined with Express.js, a minimalist web application framework, Node becomes a powerful tool for building scalable and efficient backend systems. This stack is particularly popular in the MERN (MongoDB, Express, React, Node) ecosystem for building full stack web applications."
      },
      {
        "type": "paragraph",
        "text": "Over the next 30 days, you’ll learn to build RESTful APIs, manage HTTP requests, handle asynchronous operations with promises or async/await, use middleware effectively, and secure your routes using authentication strategies like JWT. By the end of this period, you should be able to design, develop, and deploy production-ready backend systems using Node and Express."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "RESTful API Design",
            "desc": "Organize your backend routes based on resources like users, posts, or products using REST architecture."
          },
          {
            "label": "Routing in Express",
            "desc": "Use Express routers to handle different endpoints and HTTP methods (GET, POST, PUT, DELETE)."
          },
          {
            "label": "Environment Variables",
            "desc": "Use dotenv to secure credentials and separate config from source code."
          },
          {
            "label": "Database Integration",
            "desc": "Connect to MongoDB using Mongoose or use PostgreSQL with Sequelize."
          }
        ]
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "require('dotenv').config();\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.send('Hello Backend World!');\n});\n\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));"
      },
      {
        "type": "paragraph",
        "text": "In real-world scenarios, you'll want to structure your application using the MVC (Model-View-Controller) pattern. Keep routes, controllers, models, and utilities in separate directories for maintainability. Express allows you to modularize route handlers and apply middleware selectively to protect certain routes or log request data."
      },
      {
        "type": "mcq",
        "question": "Q3 Which middleware function is commonly used to parse incoming JSON payloads in Express?",
        "code": "",
        "options": [
          "express.body()",
          "express.static()",
          "express.json()",
          "express.router()"
        ],
        "correctIndex": 2
      },
      {
        "type": "paragraph",
        "text": "You'll also explore integrating third-party services like Cloudinary for file uploads, Stripe for payments, and Firebase or SendGrid for notifications. These integrations are usually implemented within route handlers or service layers and require solid understanding of asynchronous programming and Express middleware chains."
      },
      {
        "type": "paragraph",
        "text": "Lastly, ensure your API is well-documented and testable. Tools like Postman and Swagger help you test endpoints, inspect responses, and simulate edge cases. Building a robust and scalable backend using Node and Express is a critical step toward becoming a competent full stack developer."
      },
      {
        "type": "heading2",
        "id": "django",
        "text": "Django (5 Days)"
      },
      {
        "type": "video",
        "title": "Django Full Course",
        "url": "https://youtu.be/opzK3E4Xx6o?feature=shared",
        "description": "Learn Django framework including models, views, templates, and Django Admin."
      },
      {
        "type": "paragraph",
        "text": "Django is a high-level Python web framework that encourages rapid development and clean, pragmatic design. It's built by experienced developers and handles much of the hassle of web development, so you can focus on writing your app without reinventing the wheel."
      },
      {
        "type": "paragraph",
        "text": "What sets Django apart is its batteries-included philosophy—it comes with features like authentication, admin panel, ORM, templating, and URL routing right out of the box. This makes it an excellent choice for building robust, secure web applications quickly."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Admin Interface",
            "desc": "Automatically generated from models—no need to build your own admin panel."
          },
          {
            "label": "ORM (Object Relational Mapping)",
            "desc": "Use Python classes to define database models and interact with the database using Python code."
          },
          {
            "label": "Authentication System",
            "desc": "Includes secure user authentication, password hashing, session management, and permissions."
          },
          {
            "label": "Scalability",
            "desc": "Used by large-scale platforms like Instagram, Pinterest, and Disqus due to its performance and scalability."
          }
        ]
      },
      {
        "type": "code",
        "language": "python",
        "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')"
      },
      {
        "type": "paragraph",
        "text": "You can get started by installing Django via pip and running a new project using `django-admin startproject`. Django uses a powerful URL dispatcher and supports both function-based and class-based views, making it flexible for different development styles."
      },
      {
        "type": "table",
        "headers": ["Component", "Description"],
        "rows": [
          ["Model", "Defines your data structure and maps to the database."],
          [
            "View",
            "Contains the logic to process user requests and return responses."
          ],
          ["Template", "Defines how data is presented in HTML."],
          ["URLconf", "Maps URLs to views."],
          ["Admin", "Auto-generated admin interface to manage models."]
        ]
      },
      {
        "type": "mcq",
        "question": "Q4 What is the command to start a new Django project?",
        "code": "",
        "options": [
          "django startproject",
          "django-admin startproject",
          "pip install django",
          "startproject django"
        ],
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "question": "Q5 Which file in a Django app defines the URL routing?",
        "code": "",
        "options": ["views.py", "models.py", "urls.py", "admin.py"],
        "correctIndex": 2
      },
      {
        "type": "paragraph",
        "text": "Django’s templating engine allows for dynamic HTML rendering using template tags and filters. This helps in separating logic from presentation. You can extend base layouts and reuse components like navbars and footers."
      },
      {
        "type": "code",
        "language": "html",
        "code": "{% extends 'base.html' %}\n{% block content %}\n  <h1>Welcome to My Django App</h1>\n{% endblock %}"
      },
      {
        "type": "heading2",
        "id": "sql-mongodb",
        "text": "SQL and MongoDB (10 Days)"
      },
      {
        "type": "video",
        "title": "SQL Full Tutorial",
        "url": "https://youtu.be/D_wNQR3LeeM?feature=shared",
        "description": "Covers basic to advanced SQL including joins, subqueries, indexing, and schema design."
      },
      {
        "type": "video",
        "title": "MongoDB Complete Guide",
        "url": "https://youtu.be/J6mDkcqU_ZE?feature=shared",
        "description": "Beginner to advanced tutorial on MongoDB including CRUD operations and Mongoose."
      },
      {
        "type": "paragraph",
        "text": "This 10-day module covers the core concepts of SQL and MongoDB—two essential tools for modern web development. SQL is used to manage relational databases with strict schemas, whereas MongoDB is a NoSQL database designed for flexibility and scalability. Learning both allows you to handle different types of data models efficiently."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "SQL",
            "desc": "Learn structured query language to interact with relational databases like PostgreSQL and MySQL."
          },
          {
            "label": "MongoDB",
            "desc": "Master NoSQL concepts such as document storage, embedded data, and flexible schemas."
          },
          {
            "label": "ORMs",
            "desc": "Understand how Object-Relational Mapping works in frameworks like Sequelize (SQL) and Mongoose (MongoDB)."
          }
        ]
      },
      {
        "type": "table",
        "headers": ["SQL Feature", "MongoDB Equivalent"],
        "rows": [
          ["Table", "Collection"],
          ["Row", "Document"],
          ["Schema Required", "Schema-less"],
          ["Joins", "Embedded Documents / $lookup"],
          ["ACID Transactions", "Atomic Operations (single doc)"],
          ["SQL Queries", "MongoDB Queries (JSON-based)"]
        ]
      },
      {
        "type": "code",
        "language": "sql",
        "code": "SELECT name, email FROM users WHERE is_active = true;"
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "db.users.find({ is_active: true }, { name: 1, email: 1 });"
      },
      {
        "type": "mcq",
        "question": "Q6 Which HTTP method is used to create a new resource?",
        "code": "",
        "options": ["GET", "POST", "PUT", "DELETE"],
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "question": "Q7 In MongoDB, what is the term for a record?",
        "code": "",
        "options": ["Row", "Entry", "Document", "Table"],
        "correctIndex": 2
      },
      {
        "type": "mcq",
        "question": "Q8 Which SQL clause is used to filter records?",
        "code": "",
        "options": ["ORDER BY", "WHERE", "GROUP BY", "HAVING"],
        "correctIndex": 1
      },
      {
        "type": "heading1",
        "id": "devops-final-project",
        "text": "Month 6: DevOps Introduction, Final Project, and Revision"
      },
      {
        "type": "paragraph",
        "text": "The final month marks the culmination of your full stack development journey. This phase focuses on deployment, containerization, and building a comprehensive capstone project that puts all your knowledge into practice. You'll explore DevOps tools like Docker, understand the basics of CI/CD, and deploy your project to production-grade platforms."
      },
      {
        "type": "heading2",
        "id": "docker-ci-cd",
        "text": "Docker and CI/CD Basics (5 Days)"
      },
      {
        "type": "video",
        "title": "Docker and CI/CD for Beginners",
        "url": "https://youtu.be/OhnTMWmfTBE?feature=shared",
        "description": "Learn Docker fundamentals, image creation, containerization, and how CI/CD helps automate deployment workflows."
      },
      {
        "type": "paragraph",
        "text": "Docker enables you to package applications along with their dependencies into containers, ensuring consistency across different environments. You’ll learn how to build a Dockerfile, create Docker images, and run containers locally and on cloud servers. Once you're comfortable with Docker, you’ll dive into CI/CD (Continuous Integration and Continuous Deployment) workflows, which automate the process of testing and deploying code changes. Platforms like GitHub Actions or GitLab CI/CD simplify these processes for solo developers and teams alike."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Dockerfile",
            "desc": "Create and configure Dockerfiles to define environments."
          },
          {
            "label": "Docker Compose",
            "desc": "Orchestrate multi-container applications with ease."
          },
          {
            "label": "GitHub Actions",
            "desc": "Automate testing, building, and deploying from your GitHub repo."
          },
          {
            "label": "CI/CD",
            "desc": "Learn how to deploy apps automatically after code updates."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "final-project-revision",
        "text": "Final Project & Revision (Remaining Days)"
      },
      {
        "type": "paragraph",
        "text": "Now is the time to put all your learning into practice. Choose a project that is both challenging and aligns with your interests. This project will demonstrate your ability to create full stack applications that integrate frontend, backend, authentication, and deployment. Document everything on GitHub and consider writing a technical blog or README to showcase your work."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Frontend",
            "desc": "Build the UI using React, Angular, or Next.js"
          },
          {
            "label": "Backend",
            "desc": "Create RESTful APIs using Express or Django"
          },
          {
            "label": "Database",
            "desc": "Integrate SQL (PostgreSQL/MySQL) or NoSQL (MongoDB) solutions"
          },
          {
            "label": "Authentication",
            "desc": "Add secure login and signup flows"
          },
          {
            "label": "Validation & Routing",
            "desc": "Ensure proper form handling and client-side + server-side routing"
          },
          {
            "label": "Deployment",
            "desc": "Use platforms like Vercel, Netlify, or Render for production deployment"
          }
        ]
      },
      {
        "type": "heading2",
        "id": "project-ideas",
        "text": "Project Ideas"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "E-commerce platform",
            "desc": "Build an online store with cart, checkout, and admin dashboard"
          },
          {
            "label": "Task management tool",
            "desc": "Create a productivity app to add, delete, and update daily tasks"
          },
          {
            "label": "Authentication blog",
            "desc": "A personal blog where users can register, write, and manage content"
          },
          {
            "label": "Dynamic portfolio",
            "desc": "Develop a portfolio with admin panel for updating projects"
          }
        ]
      },
      {
        "type": "heading2",
        "id": "final-thoughts",
        "text": "Final Thoughts"
      },
      {
        "type": "paragraph",
        "text": "This 6-month roadmap equips you with a well-rounded understanding of full stack development. The combination of frontend, backend, and DevOps skills will enable you to build, deploy, and maintain web applications confidently. Stay consistent, challenge yourself with new features, and explore open-source projects to level up further."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Master the fundamentals",
            "desc": "Strong basics lead to better debugging and design"
          },
          {
            "label": "Build real-world projects",
            "desc": "Practical application cements theoretical knowledge"
          },
          {
            "label": "Deploy and share",
            "desc": "Live projects show your ability to ship production-grade software"
          },
          {
            "label": "Keep exploring",
            "desc": "Look into advanced topics like testing, WebSockets, GraphQL, and CI/CD pipelines"
          }
        ]
      }
    ]
  },
  {
    "slug": "full-stack-dev-3-months",
    "title": "Full Stack Dev - 3 Month Roadmap",
    "time": "3 months",
    "material": "https://res.cloudinary.com/drzyrq7d5/raw/upload/v1737822874/3_months_tttokq.docx",
    "description": "Beginner-level roadmap for full stack web development in just 3 months. Covers core frontend and backend technologies with practical projects.",
    "keywords": [
      "full stack",
      "beginner dev",
      "html",
      "css",
      "javascript",
      "nodejs",
      "react"
    ],
    "sections": [
      {
        "type": "heading1",
        "text": "Month 1: Fundamentals of Frontend Development",
        "id": "frontend-fundamentals"
      },
      {
        "type": "paragraph",
        "text": "The first month in your full stack development journey is dedicated to understanding the fundamental technologies of the web. This phase forms the bedrock upon which all future skills are built. You will explore tools that allow you to manage code effectively, structure content for web browsers, style it visually, and bring it to life with dynamic behavior."
      },
      {
        "type": "heading2",
        "text": "Git and VS Code",
        "id": "git-vscode"
      },
      {
        "type": "video",
        "title": "Git and VS Code Tutorial",
        "url": "https://youtu.be/uaeKhfhYE0U?feature=shared",
        "description": "Learn Git for version control and VS Code for modern code editing and debugging."
      },
      {
        "type": "paragraph",
        "text": "Git is the most widely used version control system that enables developers to manage and track changes in their source code during software development. It allows for collaboration, branching, and maintaining a detailed history of every modification. Whether you're working on a solo project or contributing to a team repository, understanding Git is essential."
      },
      {
        "type": "paragraph",
        "text": "Some of the most frequently used Git commands include `git init` to start a repository, `git add` to stage changes, `git commit` to record changes, `git push` to upload commits to a remote repository like GitHub, and `git pull` to fetch and merge updates from a remote source. Together, these commands provide a powerful workflow for managing your codebase efficiently."
      },
      {
        "type": "code",
        "language": "bash",
        "code": "git init\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin https://github.com/your-username/repo.git\ngit push -u origin main"
      },
      {
        "type": "paragraph",
        "text": "In addition to Git, Visual Studio Code (VS Code) is an essential tool for modern developers. It's a lightweight yet powerful source code editor developed by Microsoft, featuring built-in Git integration, debugging tools, terminal, and extensions. Mastering VS Code can significantly improve your productivity and workflow."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Prettier",
            "desc": "Automatically formats your code for consistency and readability."
          },
          {
            "label": "GitLens",
            "desc": "Enhances Git capabilities in VS Code by showing commit history, author insights, and line annotations."
          },
          {
            "label": "Live Server",
            "desc": "Launches a local development server with live reload feature for static and dynamic pages."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "VS Code also supports tasks such as debugging, terminal commands, linting, and code snippets, making it more than just a code editor. Its wide range of customizable extensions allows you to tailor it to your specific tech stack and needs."
      },
      {
        "type": "paragraph",
        "text": "Together, Git and VS Code form a powerful combination for any developer. By using Git to manage your source code and VS Code to write and test it, you can build more efficiently, collaborate more effectively, and produce cleaner, more reliable code."
      },
      {
        "type": "heading2",
        "text": "HTML (5 Days)",
        "id": "html"
      },
      {
        "type": "video",
        "title": "HTML Tutorial",
        "url": "https://youtu.be/BsDoLVMnmZs?feature=shared",
        "description": "Learn how to build the structure of web pages using HTML elements, forms, and semantic tags."
      },
      {
        "type": "paragraph",
        "text": "HTML (HyperText Markup Language) is the standard language for creating the structure of web pages. Over the next five days, you’ll develop a strong foundation in HTML tags, document structure, and accessibility. HTML acts as the backbone of any web application, outlining how elements like text, images, and forms are arranged and displayed."
      },
      {
        "type": "paragraph",
        "text": "Start by understanding basic HTML tags such as <h1> to <h6> for headings, <p> for paragraphs, <a> for links, <img> for images, and <br> for line breaks. Use <div> and <span> to create sections and inline groupings, and get comfortable with nesting elements to build a clear document hierarchy."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Forms",
            "desc": "Explore how to use <form>, <input>, <textarea>, <button>, and <select> to create interactive user forms. Understand attributes like action, method, name, and placeholder."
          },
          {
            "label": "Semantic Elements",
            "desc": "Learn about <header>, <footer>, <main>, <article>, <section>, and <nav> for more meaningful and SEO-friendly markup."
          },
          {
            "label": "Media Embedding",
            "desc": "Understand how to embed multimedia using <audio>, <video>, and <iframe> tags."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "During this phase, also study the <head> section, which includes <title>, <meta>, <link>, and <script> tags. These elements help define page metadata, include external stylesheets, and load JavaScript files. Attributes like id, class, src, alt, and href will become essential in managing behavior and accessibility of HTML elements."
      },
      {
        "type": "paragraph",
        "text": "Practice daily with small challenges. Day 1: Recreate a simple landing page. Day 2: Build a basic contact form. Days 3–4: Structure a blog post layout with semantic HTML. Day 5: Create a responsive webpage using a combination of elements, and validate it using the W3C HTML validator to ensure accessibility and best practices."
      },
      {
        "type": "paragraph",
        "text": "By the end of this HTML module, you will have the skills to create clean, well-structured HTML pages. These fundamentals will enable you to transition smoothly into styling with CSS and adding interactivity using JavaScript in the next stages of your web development journey."
      },
      {
        "type": "heading2",
        "text": "CSS (20 Days)",
        "id": "css"
      },
      {
        "type": "video",
        "title": "CSS Tutorial",
        "url": "https://www.youtube.com/watch?v=1PnVor36_40",
        "description": "Learn CSS fundamentals, responsive design, Flexbox, Grid, and animations."
      },
      {
        "type": "paragraph",
        "text": "CSS (Cascading Style Sheets) is the language that brings design to your HTML pages. It controls the look and feel of web elements—colors, fonts, spacing, layouts, animations, and responsiveness. Mastering CSS is essential for creating visually appealing and user-friendly web interfaces. In this 20-day track, you’ll go from basics to advanced layout techniques."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Selectors and Specificity",
            "desc": "Understand how to target elements effectively using tag, class, ID, attribute, and pseudo-selectors. Learn how specificity works to avoid conflicts."
          },
          {
            "label": "Box Model",
            "desc": "Understand the fundamental layout system that includes margin, border, padding, and content."
          },
          {
            "label": "Positioning",
            "desc": "Learn static, relative, absolute, fixed, and sticky positioning to control element flow."
          },
          {
            "label": "Flexbox and Grid",
            "desc": "Master modern layout systems. Flexbox is ideal for one-dimensional layouts, while Grid handles two-dimensional designs."
          },
          {
            "label": "Media Queries",
            "desc": "Make your websites responsive using breakpoints for mobile, tablet, and desktop views."
          },
          {
            "label": "Units and Sizing",
            "desc": "Learn about px, em, rem, %, vh, and vw units and when to use each."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Begin by learning how CSS is linked to HTML using external, internal, and inline methods. Once set up, practice writing clean, modular CSS that separates concerns. You’ll explore important properties such as color, background, font-family, border, padding, and margin. Understanding the box model will help you control element spacing and layout."
      },
      {
        "type": "paragraph",
        "text": "Positioning is another critical topic. You’ll learn the differences between static, relative, absolute, fixed, and sticky positions—each used for specific layout needs. Next, dive into display properties and how block, inline, and inline-block behaviors affect layout structure."
      },
      {
        "type": "paragraph",
        "text": "With Flexbox, you'll practice aligning and distributing space within a container, making it easy to build responsive navbars, footers, and cards. Grid expands this capability to two-dimensional layouts, allowing for magazine-style designs with minimal code. By the end, you’ll be able to combine both Flex and Grid in real-world projects."
      },
      {
        "type": "paragraph",
        "text": "Finally, you’ll cover transitions, animations, and pseudo-classes like :hover, :focus, and :nth-child to add interactivity. You’ll also explore how to use developer tools in browsers like Chrome and Firefox to inspect and debug CSS in real-time."
      },
      {
        "type": "code",
        "language": "css",
        "code": "/* Simple Flexbox Example */\n.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n}\n\n.item {\n  flex: 1;\n  margin: 0 10px;\n}"
      },
      {
        "type": "heading2",
        "text": "JavaScript (20 Days)",
        "id": "javascript"
      },
      {
        "type": "video",
        "title": "JavaScript Tutorial",
        "url": "https://youtu.be/rfObCuGLSek?feature=shared",
        "description": "Master JavaScript basics including functions, arrays, DOM manipulation, and ES6 syntax."
      },
      {
        "type": "paragraph",
        "text": "JavaScript is the backbone of modern web interactivity. In this 20-day segment, you'll progress from beginner-level syntax to intermediate topics and essential web functionalities. Begin with the core language syntax—understanding `var`, `let`, and `const`, exploring data types like strings, numbers, booleans, and mastering basic operators and control flow with `if`, `else`, `switch`, and loops such as `for`, `while`, and `do...while`."
      },
      {
        "type": "paragraph",
        "text": "Once you've gained confidence with the syntax, you’ll learn how to create reusable functions, manage scope and hoisting, and explore key concepts like closures. Move on to arrays and objects, mastering built-in methods such as `map`, `filter`, `reduce`, and `forEach`. Practice manipulating nested structures and use these to model real-world data."
      },
      {
        "type": "paragraph",
        "text": "The next step is DOM (Document Object Model) manipulation, which allows you to interact with HTML elements directly via JavaScript. Learn how to select elements with `getElementById`, `querySelector`, and how to modify styles, content, and structure. Add event listeners to respond to user input such as clicks and form submissions. This is where JavaScript turns from static scripting into a dynamic web powerhouse."
      },
      {
        "type": "paragraph",
        "text": "Modern JavaScript (ES6+) brings powerful features like arrow functions, template literals, destructuring, and default parameters. Understand asynchronous programming through callbacks, promises, and `async/await`, which are crucial for handling APIs and user-driven updates without blocking the main thread. Build basic projects like a to-do list, stopwatch, quiz app, or currency converter using vanilla JavaScript to reinforce concepts."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const fetchData = async () => {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Goal by end of Month 1",
            "desc": "Be confident building fully interactive, responsive web pages using JavaScript, and understand how the DOM and browser environment works."
          },
          {
            "label": "Best Practice",
            "desc": "Always write modular and readable code. Break problems into functions and follow DRY (Don't Repeat Yourself) principles."
          },
          {
            "label": "Project Tip",
            "desc": "Build a personal portfolio or blog site where users can add posts or toggle themes using only HTML, CSS, and JavaScript."
          },
          {
            "label": "Practice Idea",
            "desc": "Use online platforms like CodeWars, LeetCode, and JavaScript30 to test your understanding and problem-solving skills."
          }
        ]
      },
      {
        "type": "mcq",
        "question": "Q1 What will be the output of the following code?",
        "code": "let x = 5;\nlet y = x++;\nconsole.log(y);",
        "options": ["5", "6", "undefined", "Error"],
        "correctIndex": 0
      },
      {
        "type": "mcq",
        "question": "Q2 Which of the following is the correct way to declare an arrow function in JavaScript?",
        "code": "",
        "options": [
          "function => myFunc() {}",
          "let myFunc = () => {}",
          "arrow myFunc() => {}",
          "let myFunc = function => {}"
        ],
        "correctIndex": 1
      },
      {
        "type": "mcq",
        "question": "Q3 What does the `this` keyword refer to inside a regular function (non-arrow) in strict mode?",
        "code": "",
        "options": [
          "The global object (window in browser)",
          "The parent function",
          "undefined",
          "The object that called the function"
        ],
        "correctIndex": 2
      },
      {
        "type": "heading1",
        "text": "Month 2: Choose a Frontend Framework",
        "id": "month-2-frontend-framework"
      },
      {
        "type": "paragraph",
        "text": "After laying a solid foundation in HTML, CSS, and JavaScript, it’s time to advance into modern frontend frameworks. These frameworks enable developers to build scalable, interactive, and maintainable web applications more efficiently. In this phase, you will explore three popular frontend frameworks—React, Angular, and Next.js. Each framework has its own strengths and is suitable for different project types, so choose based on your learning goals and the type of application you want to build."
      },
      {
        "type": "paragraph",
        "text": "The purpose of this month is to get you comfortable with a modern frontend toolchain, understand the component-based architecture, learn how to manage UI state effectively, and build full-featured applications. Whether you choose React, Angular, or Next.js, the key is to go deep into one and understand how it connects with the broader frontend ecosystem."
      },
      {
        "type": "heading2",
        "text": "React (5 Days)",
        "id": "react"
      },
      {
        "type": "video",
        "title": "React Tutorial for Beginners",
        "url": "https://youtu.be/E6tAtRi82QY?feature=shared",
        "description": "A beginner-friendly introduction to React.js, covering JSX, props, state, hooks, and more."
      },
      {
        "type": "paragraph",
        "text": "React is one of the most popular frontend libraries used by companies such as Meta, Airbnb, and Netflix. It allows developers to build complex user interfaces using reusable components. The React ecosystem is vast, with powerful tools for routing, state management, and testing."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "JSX",
            "desc": "An HTML-like syntax used inside JavaScript files to describe the UI."
          },
          {
            "label": "Components",
            "desc": "Self-contained, reusable pieces of UI that make up a React app."
          },
          {
            "label": "Props and State",
            "desc": "Props allow data to be passed between components; state is used to store data internally."
          },
          {
            "label": "Hooks",
            "desc": "Special functions like useState and useEffect to manage side effects and component logic."
          },
          {
            "label": "Lifecycle",
            "desc": "Understanding how components mount, update, and unmount."
          }
        ]
      },
      {
        "type": "heading2",
        "text": "Angular (10 Days)",
        "id": "angular"
      },
      {
        "type": "video",
        "title": "Angular Crash Course",
        "url": "https://youtu.be/JWhRMyyF7nc?feature=shared",
        "description": "A complete Angular beginner guide covering components, services, routing, and modules."
      },
      {
        "type": "paragraph",
        "text": "Angular is a full-fledged framework developed by Google and is widely used in enterprise applications. Unlike React, Angular is opinionated and comes with batteries included—meaning it has routing, state management, and HTTP services built-in."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "TypeScript",
            "desc": "Angular uses TypeScript by default, offering strong typing and better tooling."
          },
          {
            "label": "Modules and Components",
            "desc": "Organize the application into logical units and reusable blocks."
          },
          {
            "label": "Services and Dependency Injection",
            "desc": "Use services to handle data and business logic, injected where needed."
          },
          {
            "label": "Routing",
            "desc": "Manage navigation between views using Angular Router."
          },
          {
            "label": "RxJS",
            "desc": "Reactive programming support for handling asynchronous operations."
          }
        ]
      },
      {
        "type": "heading2",
        "text": "Next.js (5 Days)",
        "id": "nextjs"
      },
      {
        "type": "video",
        "title": "Next.js Crash Course",
        "url": "https://youtu.be/yN8VXmncvRU?feature=shared",
        "description": "Learn how to build React apps with server-side rendering, routing, and SEO using Next.js."
      },
      {
        "type": "paragraph",
        "text": "Next.js is a React-based framework built by Vercel. It simplifies many aspects of building modern web applications, such as file-based routing, server-side rendering, and API routes. It is great for developers who want to enhance performance, SEO, and developer experience."
      },
      {
        "type": "list",
        "items": [
          {
            "label": "File-based Routing",
            "desc": "Create pages simply by adding files in the pages directory."
          },
          {
            "label": "Server-Side Rendering",
            "desc": "Render pages on the server for better performance and SEO."
          },
          {
            "label": "API Routes",
            "desc": "Build backend logic inside the same project."
          },
          {
            "label": "Static Site Generation",
            "desc": "Generate static pages at build time for faster delivery."
          },
          {
            "label": "Built-in CSS Support",
            "desc": "Use global styles, CSS modules, or even Tailwind out of the box."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "By the end of this month, you should be able to build and deploy a complete frontend application using the framework of your choice. You will understand how to break down UIs into components, manage application state, handle routing and navigation, and optimize performance."
      },
      {
        "type": "paragraph",
        "text": "No matter which framework you choose, the core concepts of reusable components, state management, and user interaction remain the same. Focus on understanding these fundamentals deeply. Once you're comfortable, you’ll find it easier to switch or expand into other frameworks."
      },
      {
        "type": "heading1",
        "text": "Month 2–3: Backend Development and Databases",
        "id": "backend-databases"
      },
      {
        "type": "paragraph",
        "text": "With the frontend complete, Months 2 and 3 shift focus toward backend development and database design. This phase strengthens your ability to build real-world, full-stack applications by creating APIs, handling authentication, managing data, and choosing suitable database systems to fit your project’s requirements."
      },
      {
        "type": "heading2",
        "text": "Node.js & Express.js (15 Days)",
        "id": "node-express"
      },
      {
        "type": "video",
        "title": "Node & Express Tutorial",
        "url": "https://youtu.be/BLl32FvcdVM?feature=shared",
        "description": "Learn how to build RESTful APIs, manage HTTP requests, middleware, and authentication in Node.js."
      },
      {
        "type": "paragraph",
        "text": "Node.js enables JavaScript to run on the server, and Express.js offers a minimalist framework for building APIs. Over 15 days, you’ll set up secure routes, implement JSON responses, add middleware for operations like logging and authentication, and learn how to structure a scalable project."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const express = require('express');\nconst app = express();\napp.use(express.json());\napp.get('/api/health', (req, res) => res.json({ status: 'ok' }));\napp.listen(3000, () => console.log('Server running on port 3000'));"
      },
      {
        "type": "heading2",
        "text": "Django (15 Days)",
        "id": "django"
      },
      {
        "type": "video",
        "title": "Django Full Tutorial",
        "url": "https://www.youtube.com/watch?v=j6szNSzw4BU&list=PLu71SKxNbfoDOf-6vAcKmazT92uLnWAgy",
        "description": "Learn Django’s built-in admin, ORM, user authentication, and scalable app structure."
      },
      {
        "type": "paragraph",
        "text": "Django is a batteries-included Python framework. In 15 days, you’ll build models, use the ORM to query databases, manage admin interfaces, and implement user authentication. Choose Django over Node.js if you're more comfortable with Python or want a more opinionated and quickly productive backend stack."
      },
      {
        "type": "code",
        "language": "python",
        "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    published = models.DateTimeField(auto_now_add=True)"
      },
      {
        "type": "paragraph",
        "text": "Both full-stack routes (Node/Express or Django) need CRUD operations, validation, and modular structure. Your choice depends on language preference, ecosystem flexibility, and deployment environment."
      },
      {
        "type": "heading2",
        "text": "SQL (5 Days)",
        "id": "sql"
      },
      {
        "type": "video",
        "title": "SQL Tutorial",
        "url": "https://youtu.be/D_wNQR3LeeM?feature=shared",
        "description": "Master SQL queries: SELECT, JOIN, GROUP BY, filtering, and aggregation."
      },
      {
        "type": "paragraph",
        "text": "Relational databases help ensure data integrity and complex querying ability. Spend 5 days mastering table design, JOIN operations, filtering, and understanding normalization. This helps you store and maintain well-structured data in full-stack apps."
      },
      {
        "type": "code",
        "language": "sql",
        "code": "CREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(100),\n  email VARCHAR(100) UNIQUE\n);\nSELECT users.name, COUNT(posts.id)\nFROM users\nJOIN posts ON posts.user_id = users.id\nGROUP BY users.name;"
      },
      {
        "type": "heading2",
        "text": "MongoDB (5 Days)",
        "id": "mongodb"
      },
      {
        "type": "video",
        "title": "MongoDB Tutorial",
        "url": "https://youtu.be/J6mDkcqU_ZE?feature=shared",
        "description": "Learn CRUD operations, schema design, aggregation, and indexing in MongoDB."
      },
      {
        "type": "paragraph",
        "text": "MongoDB’s flexible, document-based model fits JSON-style data common in web applications. In 5 days, learn structure design, CRUD operations, indexing, and how MongoDB integrates with Express or Django via connectors."
      },
      {
        "type": "code",
        "language": "javascript",
        "code": "const { MongoClient } = require('mongodb');\nasync function run() {\n  const client = new MongoClient(url);\n  await client.connect();\n  const db = client.db('appDb');\n  const users = db.collection('users');\n  await users.insertOne({ name: 'Alice', age: 30 });\n}\nrun();"
      },
      {
        "type": "table",
        "headers": ["Season", "Topics", "Details"],
        "rows": [
          ["Node.js", "REST API, Middleware", "15 days"],
          ["Django", "Models, Admin, Auth", "15 days"],
          ["SQL", "Relational Design, Queries", "5 days"],
          ["MongoDB", "Flexible Schema, CRUD", "5 days"]
        ]
      },
      {
        "type": "paragraph",
        "text": "By the end of Month 3, you'll be able to build and deploy a secure, data-driven backend with either Node/Express or Django, connected to a database of your choice, forming a complete backend foundation for your full-stack career."
      },
      {
        "type": "heading2",
        "id": "final-phase",
        "text": "Final Phase: Project and Revision"
      },
      {
        "type": "paragraph",
        "text": "In the final phase of your full stack development journey, it's time to bring everything together. This is your opportunity to apply the skills and knowledge you've gained over the past two months to build a complete, functional, and deployable web application. By working on a capstone project, you not only reinforce your learning but also create something that can be showcased to potential employers or used as a foundation for future projects."
      },
      {
        "type": "paragraph",
        "text": "This 15-day period will involve ideation, planning, coding, testing, and deploying a full stack application. The experience will be challenging but immensely rewarding. You'll get a real sense of how frontend and backend technologies integrate, how databases persist data, and how everything runs in a production-like environment."
      },
      {
        "type": "heading2",
        "id": "capstone-requirements",
        "text": "Capstone Project Requirements"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Frontend",
            "desc": "Build the user interface using a modern framework such as React, Angular, or Next.js. Your UI should be responsive, accessible, and intuitive."
          },
          {
            "label": "Backend",
            "desc": "Develop robust backend APIs using either Node.js with Express or Django (Python). Implement proper routing, middleware, and error handling."
          },
          {
            "label": "Database",
            "desc": "Use MongoDB for a NoSQL approach or SQL (like PostgreSQL/MySQL) for relational data needs. Create schemas, perform CRUD operations, and ensure proper validation."
          },
          {
            "label": "Authentication",
            "desc": "Implement user authentication using JWT or session-based methods. Include role-based access if relevant."
          },
          {
            "label": "State Management",
            "desc": "Use Redux, Context API, or Angular services to manage global state across your application."
          },
          {
            "label": "Deployment",
            "desc": "Deploy the application using platforms like Vercel, Netlify, Heroku, or Render. Configure environment variables, databases, and production build steps."
          }
        ]
      },
      {
        "type": "paragraph",
        "text": "Your project should solve a real-world problem or simulate a useful business case. Ensure that it includes user interactions, form validations, API communication, and basic security practices."
      },
      {
        "type": "heading2",
        "id": "project-ideas",
        "text": "Project Ideas"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Task Manager",
            "desc": "A personal task management tool with features like to-do lists, due dates, priority labels, and drag-and-drop interface."
          },
          {
            "label": "Blog CMS",
            "desc": "Create a content management system where users can write, edit, and publish blog posts with Markdown support."
          },
          {
            "label": "E-commerce Store",
            "desc": "A full-featured online store with product listings, cart functionality, user authentication, and order tracking."
          },
          {
            "label": "Real-time Chat App",
            "desc": "A live chat system using WebSockets or Socket.IO, with features like group chat, typing indicators, and offline storage."
          }
        ]
      },
      {
        "type": "heading2",
        "id": "final-thoughts",
        "text": "Final Thoughts"
      },
      {
        "type": "paragraph",
        "text": "This 3-month roadmap has been curated to help you become a job-ready full stack developer. By now, you’ve touched on all critical areas—from frontend interfaces to backend APIs and databases. What truly separates a beginner from a confident developer is consistent practice, the habit of building projects, and the curiosity to learn more."
      },
      {
        "type": "paragraph",
        "text": "Remember that no roadmap can cover every aspect of web development. The tech industry evolves rapidly, and lifelong learning is a key trait of any successful developer. Use this capstone as a stepping stone to explore advanced concepts like CI/CD, performance optimization, WebSockets, GraphQL, and cloud deployment."
      },
      {
        "type": "heading2",
        "id": "key-takeaways",
        "text": "Key Takeaways"
      },
      {
        "type": "list",
        "items": [
          {
            "label": "Focus on Fundamentals",
            "desc": "Before jumping into frameworks, understand HTML, CSS, JavaScript, and how the web works."
          },
          {
            "label": "Project-Based Learning",
            "desc": "Build projects to apply your knowledge and solve real-world problems."
          },
          {
            "label": "Use GitHub",
            "desc": "Document and host your work on GitHub to build a solid developer portfolio."
          },
          {
            "label": "Be Consistent",
            "desc": "Progress requires regular effort. Set small daily goals and keep showing up."
          }
        ]
      }
    ]
  }
]
